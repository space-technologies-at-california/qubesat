
ADC_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005a28  08005a28  00015a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca0  08005ca0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca8  08005ca8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200001dc  08005e8c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005e8c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086f9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001675  00000000  00000000  00028905  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021857  00000000  00000000  0002ad98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075ca  00000000  00000000  0004c5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca7e  00000000  00000000  00053bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  001206b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a10 	.word	0x08005a10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08005a10 	.word	0x08005a10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b095      	sub	sp, #84	; 0x54
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t raw;
  //float scaled;
  char msg[16];
  int curr = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  int i = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  int state = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	647b      	str	r3, [r7, #68]	; 0x44
  int prev = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  int index = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  int pass = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  int LD_ON_TIME = 15000;
 8000fa6:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  int BKGND_TIME = 5000;
 8000fac:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int num_samples = LD_ON_TIME + (2*BKGND_TIME);
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fb8:	4413      	add	r3, r2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  float arr[num_samples];
 8000fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fbe:	1e43      	subs	r3, r0, #1
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	f04f 0400 	mov.w	r4, #0
 8000fd2:	0154      	lsls	r4, r2, #5
 8000fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fd8:	014b      	lsls	r3, r1, #5
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	f04f 0400 	mov.w	r4, #0
 8000fea:	0154      	lsls	r4, r2, #5
 8000fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff0:	014b      	lsls	r3, r1, #5
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	3307      	adds	r3, #7
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	ebad 0d03 	sub.w	sp, sp, r3
 8001002:	466b      	mov	r3, sp
 8001004:	3303      	adds	r3, #3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	623b      	str	r3, [r7, #32]
  int num_passes = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fbe0 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f922 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 fa0a 	bl	8001430 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f9de 	bl	80013dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001020:	f000 f98a 	bl	8001338 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (state == 1) {
 8001024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001026:	2b01      	cmp	r3, #1
 8001028:	d155      	bne.n	80010d6 <main+0x14e>
		pass += 1;
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	3301      	adds	r3, #1
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
		if (pass <= num_passes) {
 8001030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	dc0e      	bgt.n	8001056 <main+0xce>
			curr = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
	  		i = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		state = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
	  		prev = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
	  		index = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  		HAL_Delay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001050:	f000 fc32 	bl	80018b8 <HAL_Delay>
 8001054:	e03f      	b.n	80010d6 <main+0x14e>
	  	} else {
	  		float val;
	  		for (int j = 0; j < num_samples; j+=1){
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
 800105a:	e037      	b.n	80010cc <main+0x144>
	  			val = 3.3 * arr[j] / 4096;
 800105c:	6a3a      	ldr	r2, [r7, #32]
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa8e 	bl	8000588 <__aeabi_f2d>
 800106c:	a379      	add	r3, pc, #484	; (adr r3, 8001254 <main+0x2cc>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fae1 	bl	8000638 <__aeabi_dmul>
 8001076:	4603      	mov	r3, r0
 8001078:	460c      	mov	r4, r1
 800107a:	4618      	mov	r0, r3
 800107c:	4621      	mov	r1, r4
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <main+0x2b8>)
 8001084:	f7ff fc02 	bl	800088c <__aeabi_ddiv>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fdaa 	bl	8000be8 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	61bb      	str	r3, [r7, #24]
	  			sprintf(msg, "%f\n", val);
 8001098:	69b8      	ldr	r0, [r7, #24]
 800109a:	f7ff fa75 	bl	8000588 <__aeabi_f2d>
 800109e:	4603      	mov	r3, r0
 80010a0:	460c      	mov	r4, r1
 80010a2:	1d38      	adds	r0, r7, #4
 80010a4:	461a      	mov	r2, r3
 80010a6:	4623      	mov	r3, r4
 80010a8:	4966      	ldr	r1, [pc, #408]	; (8001244 <main+0x2bc>)
 80010aa:	f003 f8d1 	bl	8004250 <siprintf>
	  			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f8ad 	bl	8000210 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	1d39      	adds	r1, r7, #4
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	4861      	ldr	r0, [pc, #388]	; (8001248 <main+0x2c0>)
 80010c2:	f001 ffd8 	bl	8003076 <HAL_UART_Transmit>
	  		for (int j = 0; j < num_samples; j+=1){
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	3301      	adds	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
 80010cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbc3      	blt.n	800105c <main+0xd4>
	  		}
	  		while(1) {
	  			continue;
 80010d4:	e7fe      	b.n	80010d4 <main+0x14c>
	  		}
	  	}
	}

	if (curr != prev) {
 80010d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	429a      	cmp	r2, r3
 80010dc:	d011      	beq.n	8001102 <main+0x17a>
		if (curr == 1) {
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d106      	bne.n	80010f2 <main+0x16a>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	4858      	ldr	r0, [pc, #352]	; (800124c <main+0x2c4>)
 80010ec:	f001 fa48 	bl	8002580 <HAL_GPIO_WritePin>
 80010f0:	e005      	b.n	80010fe <main+0x176>
	  	} else {
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	4854      	ldr	r0, [pc, #336]	; (800124c <main+0x2c4>)
 80010fa:	f001 fa41 	bl	8002580 <HAL_GPIO_WritePin>
	  	}
	  	prev = curr;
 80010fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001100:	643b      	str	r3, [r7, #64]	; 0x40
	}

	if (i >= BKGND_TIME && i <= LD_ON_TIME + BKGND_TIME) {
 8001102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	429a      	cmp	r2, r3
 8001108:	db3d      	blt.n	8001186 <main+0x1fe>
 800110a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	4413      	add	r3, r2
 8001110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001112:	429a      	cmp	r2, r3
 8001114:	dc37      	bgt.n	8001186 <main+0x1fe>
	  	curr = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
	  	i += 1;
 800111a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111c:	3301      	adds	r3, #1
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	HAL_ADC_Start(&hadc1);
 8001120:	484b      	ldr	r0, [pc, #300]	; (8001250 <main+0x2c8>)
 8001122:	f000 fc2f 	bl	8001984 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001126:	f04f 31ff 	mov.w	r1, #4294967295
 800112a:	4849      	ldr	r0, [pc, #292]	; (8001250 <main+0x2c8>)
 800112c:	f000 fcf0 	bl	8001b10 <HAL_ADC_PollForConversion>
	  	raw = HAL_ADC_GetValue(&hadc1);
 8001130:	4847      	ldr	r0, [pc, #284]	; (8001250 <main+0x2c8>)
 8001132:	f000 fd71 	bl	8001c18 <HAL_ADC_GetValue>
 8001136:	4603      	mov	r3, r0
 8001138:	82fb      	strh	r3, [r7, #22]
	  	arr[index] = ((arr[index] * pass) + raw) / (pass + 1);
 800113a:	6a3a      	ldr	r2, [r7, #32]
 800113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001154:	8afb      	ldrh	r3, [r7, #22]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001164:	3301      	adds	r3, #1
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	6a3a      	ldr	r2, [r7, #32]
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	edc3 7a00 	vstr	s15, [r3]
	  	index += 1;
 800117e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001180:	3301      	adds	r3, #1
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001184:	e05a      	b.n	800123c <main+0x2b4>
	} else if ((i >= 0 && i < BKGND_TIME) || (i > LD_ON_TIME + BKGND_TIME && i <= LD_ON_TIME + (2 * BKGND_TIME))) {
 8001186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001188:	2b00      	cmp	r3, #0
 800118a:	db03      	blt.n	8001194 <main+0x20c>
 800118c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001190:	429a      	cmp	r2, r3
 8001192:	db0c      	blt.n	80011ae <main+0x226>
 8001194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001198:	4413      	add	r3, r2
 800119a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800119c:	429a      	cmp	r2, r3
 800119e:	dd3e      	ble.n	800121e <main+0x296>
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a2:	005a      	lsls	r2, r3, #1
 80011a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a6:	4413      	add	r3, r2
 80011a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dc37      	bgt.n	800121e <main+0x296>
	  	curr = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
	  	i += 1;
 80011b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b4:	3301      	adds	r3, #1
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	HAL_ADC_Start(&hadc1);
 80011b8:	4825      	ldr	r0, [pc, #148]	; (8001250 <main+0x2c8>)
 80011ba:	f000 fbe3 	bl	8001984 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011be:	f04f 31ff 	mov.w	r1, #4294967295
 80011c2:	4823      	ldr	r0, [pc, #140]	; (8001250 <main+0x2c8>)
 80011c4:	f000 fca4 	bl	8001b10 <HAL_ADC_PollForConversion>
	  	raw = HAL_ADC_GetValue(&hadc1);
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <main+0x2c8>)
 80011ca:	f000 fd25 	bl	8001c18 <HAL_ADC_GetValue>
 80011ce:	4603      	mov	r3, r0
 80011d0:	82fb      	strh	r3, [r7, #22]
	  	arr[index] = ((arr[index] * pass) + raw) / (pass + 1);
 80011d2:	6a3a      	ldr	r2, [r7, #32]
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fc:	3301      	adds	r3, #1
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120a:	6a3a      	ldr	r2, [r7, #32]
 800120c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	edc3 7a00 	vstr	s15, [r3]
	  	index += 1;
 8001216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001218:	3301      	adds	r3, #1
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800121c:	e00e      	b.n	800123c <main+0x2b4>
	} else {
	  	curr = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	64bb      	str	r3, [r7, #72]	; 0x48
	  	i += 1;
 8001222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001224:	3301      	adds	r3, #1
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	if (i > LD_ON_TIME + (2 * BKGND_TIME)) {
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	005a      	lsls	r2, r3, #1
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	4413      	add	r3, r2
 8001230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001232:	429a      	cmp	r2, r3
 8001234:	f77f aef6 	ble.w	8001024 <main+0x9c>
	  		state = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
	if (state == 1) {
 800123c:	e6f2      	b.n	8001024 <main+0x9c>
 800123e:	bf00      	nop
 8001240:	40b00000 	.word	0x40b00000
 8001244:	08005a28 	.word	0x08005a28
 8001248:	2000024c 	.word	0x2000024c
 800124c:	40020000 	.word	0x40020000
 8001250:	20000204 	.word	0x20000204
 8001254:	66666666 	.word	0x66666666
 8001258:	400a6666 	.word	0x400a6666

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2234      	movs	r2, #52	; 0x34
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fb8c 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <SystemClock_Config+0xd4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <SystemClock_Config+0xd4>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <SystemClock_Config+0xd4>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <SystemClock_Config+0xd8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012a8:	4a22      	ldr	r2, [pc, #136]	; (8001334 <SystemClock_Config+0xd8>)
 80012aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <SystemClock_Config+0xd8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012d0:	2310      	movs	r3, #16
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012da:	2304      	movs	r3, #4
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012de:	2302      	movs	r3, #2
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fc1c 	bl	8002b28 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012f6:	f000 f90d 	bl	8001514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f94c 	bl	80025b4 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001322:	f000 f8f7 	bl	8001514 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC1_Init+0x98>)
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_ADC1_Init+0x9c>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001356:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_ADC1_Init+0x98>)
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <MX_ADC1_Init+0xa0>)
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_ADC1_Init+0x98>)
 8001394:	2201      	movs	r2, #1
 8001396:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_ADC1_Init+0x98>)
 800139a:	f000 faaf 	bl	80018fc <HAL_ADC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 f8b6 	bl	8001514 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_ADC1_Init+0x98>)
 80013ba:	f000 fc3b 	bl	8001c34 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c4:	f000 f8a6 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000204 	.word	0x20000204
 80013d4:	40012000 	.word	0x40012000
 80013d8:	0f000001 	.word	0x0f000001

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART2_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001414:	f001 fde2 	bl	8002fdc <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 f879 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000024c 	.word	0x2000024c
 800142c:	40004400 	.word	0x40004400

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <MX_GPIO_Init+0xd4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <MX_GPIO_Init+0xd4>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_GPIO_Init+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_GPIO_Init+0xd4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_GPIO_Init+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80014bc:	4812      	ldr	r0, [pc, #72]	; (8001508 <MX_GPIO_Init+0xd8>)
 80014be:	f001 f85f 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_GPIO_Init+0xdc>)
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <MX_GPIO_Init+0xe0>)
 80014d8:	f000 fec0 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80014dc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_GPIO_Init+0xd8>)
 80014f6:	f000 feb1 	bl	800225c <HAL_GPIO_Init>

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	10210000 	.word	0x10210000
 8001510:	40020800 	.word	0x40020800

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001562:	2007      	movs	r0, #7
 8001564:	f000 fe46 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_ADC_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d127      	bne.n	80015e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_ADC_MspInit+0x80>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_ADC_MspInit+0x84>)
 80015e2:	f000 fe3b 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012000 	.word	0x40012000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_UART_MspInit+0x84>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12b      	bne.n	8001676 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_UART_MspInit+0x88>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_UART_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001656:	230c      	movs	r3, #12
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001666:	2307      	movs	r3, #7
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_UART_MspInit+0x8c>)
 8001672:	f000 fdf3 	bl	800225c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40004400 	.word	0x40004400
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f8ca 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f002 f90c 	bl	8003934 <__errno>
 800171c:	4602      	mov	r2, r0
 800171e:	230c      	movs	r3, #12
 8001720:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	200001f8 	.word	0x200001f8
 8001750:	20000298 	.word	0x20000298

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <SystemInit+0x28>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <SystemInit+0x28>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <SystemInit+0x28>)
 800176a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176e:	609a      	str	r2, [r3, #8]
#endif
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001786:	e003      	b.n	8001790 <LoopCopyDataInit>

08001788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800178a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800178c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800178e:	3104      	adds	r1, #4

08001790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001798:	d3f6      	bcc.n	8001788 <CopyDataInit>
  ldr  r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800179c:	e002      	b.n	80017a4 <LoopFillZerobss>

0800179e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800179e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a0:	f842 3b04 	str.w	r3, [r2], #4

080017a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017a8:	d3f9      	bcc.n	800179e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd3 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f002 f8c7 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fbe9 	bl	8000f88 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017bc:	08005cb0 	.word	0x08005cb0
  ldr  r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017c4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80017c8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80017cc:	20000294 	.word	0x20000294

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 fcf9 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe8c 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fd03 	bl	8002242 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 fcd9 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	2000028c 	.word	0x2000028c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000028c 	.word	0x2000028c

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_Delay+0x40>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000008 	.word	0x20000008

080018fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e033      	b.n	800197a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe2a 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001942:	f023 0302 	bic.w	r3, r3, #2
 8001946:	f043 0202 	orr.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 faa2 	bl	8001e98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
 800196a:	e001      	b.n	8001970 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_Start+0x1a>
 800199a:	2302      	movs	r3, #2
 800199c:	e0a5      	b.n	8001aea <HAL_ADC_Start+0x166>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d018      	beq.n	80019e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c4:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_ADC_Start+0x174>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_ADC_Start+0x178>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9a      	lsrs	r2, r3, #18
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d179      	bne.n	8001ae8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f023 0206 	bic.w	r2, r3, #6
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_ADC_Start+0x17c>)
 8001a52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d12a      	bne.n	8001ac0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_ADC_Start+0x180>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d015      	beq.n	8001aa0 <HAL_ADC_Start+0x11c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_ADC_Start+0x184>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d105      	bne.n	8001a8a <HAL_ADC_Start+0x106>
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_ADC_Start+0x17c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_ADC_Start+0x188>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d129      	bne.n	8001ae8 <HAL_ADC_Start+0x164>
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_ADC_Start+0x17c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d823      	bhi.n	8001ae8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11c      	bne.n	8001ae8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	e013      	b.n	8001ae8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_ADC_Start+0x180>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_ADC_Start+0x164>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	40012300 	.word	0x40012300
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40012100 	.word	0x40012100
 8001b0c:	40012200 	.word	0x40012200

08001b10 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2c:	d113      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d10b      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e05c      	b.n	8001c10 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b56:	f7ff fea3 	bl	80018a0 <HAL_GetTick>
 8001b5a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5c:	e01a      	b.n	8001b94 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d016      	beq.n	8001b94 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_ADC_PollForConversion+0x6c>
 8001b6c:	f7ff fe98 	bl	80018a0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d20b      	bcs.n	8001b94 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0204 	orr.w	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e03d      	b.n	8001c10 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d1dd      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0212 	mvn.w	r2, #18
 8001baa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d123      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11f      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d111      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1c>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e113      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x244>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d925      	bls.n	8001cac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68d9      	ldr	r1, [r3, #12]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3b1e      	subs	r3, #30
 8001c76:	2207      	movs	r2, #7
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	400a      	ands	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d9      	ldr	r1, [r3, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4403      	add	r3, r0
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	e022      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6919      	ldr	r1, [r3, #16]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4403      	add	r3, r0
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d824      	bhi.n	8001d44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b05      	subs	r3, #5
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	400a      	ands	r2, r1
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b05      	subs	r3, #5
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
 8001d42:	e04c      	b.n	8001dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d824      	bhi.n	8001d96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b23      	subs	r3, #35	; 0x23
 8001d5e:	221f      	movs	r2, #31
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43da      	mvns	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b23      	subs	r3, #35	; 0x23
 8001d88:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
 8001d94:	e023      	b.n	8001dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b41      	subs	r3, #65	; 0x41
 8001da8:	221f      	movs	r2, #31
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	400a      	ands	r2, r1
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b41      	subs	r3, #65	; 0x41
 8001dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_ADC_ConfigChannel+0x250>)
 8001de0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_ADC_ConfigChannel+0x254>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d10f      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1d8>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <HAL_ADC_ConfigChannel+0x254>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12b      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_ADC_ConfigChannel+0x258>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0x1f4>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b11      	cmp	r3, #17
 8001e26:	d122      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_ADC_ConfigChannel+0x258>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_ADC_ConfigChannel+0x25c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <HAL_ADC_ConfigChannel+0x260>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	0c9a      	lsrs	r2, r3, #18
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	10000012 	.word	0x10000012
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea0:	4b79      	ldr	r3, [pc, #484]	; (8002088 <ADC_Init+0x1f0>)
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	4a58      	ldr	r2, [pc, #352]	; (800208c <ADC_Init+0x1f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e00f      	b.n	8001f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0202 	bic.w	r2, r2, #2
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	005a      	lsls	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	035a      	lsls	r2, r3, #13
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e007      	b.n	800200c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	3b01      	subs	r3, #1
 8002028:	051a      	lsls	r2, r3, #20
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204e:	025a      	lsls	r2, r3, #9
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	029a      	lsls	r2, r3, #10
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40012300 	.word	0x40012300
 800208c:	0f000001 	.word	0x0f000001

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff47 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff5c 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff8e 	bl	8002148 <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffb0 	bl	80021b0 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e165      	b.n	8002544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8154 	bne.w	800253e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d00b      	beq.n	80022b6 <HAL_GPIO_Init+0x5a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d130      	bne.n	8002318 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0xfc>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b12      	cmp	r3, #18
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80ae 	beq.w	800253e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_GPIO_Init+0x2fc>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <HAL_GPIO_Init+0x2fc>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_GPIO_Init+0x2fc>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_GPIO_Init+0x300>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4e      	ldr	r2, [pc, #312]	; (8002560 <HAL_GPIO_Init+0x304>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d025      	beq.n	8002476 <HAL_GPIO_Init+0x21a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <HAL_GPIO_Init+0x308>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <HAL_GPIO_Init+0x216>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_GPIO_Init+0x30c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x212>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_GPIO_Init+0x310>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x20e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_GPIO_Init+0x314>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x20a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a49      	ldr	r2, [pc, #292]	; (8002574 <HAL_GPIO_Init+0x318>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x206>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a48      	ldr	r2, [pc, #288]	; (8002578 <HAL_GPIO_Init+0x31c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x202>
 800245a:	2306      	movs	r3, #6
 800245c:	e00c      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 800245e:	2307      	movs	r3, #7
 8002460:	e00a      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 8002462:	2305      	movs	r3, #5
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 8002466:	2304      	movs	r3, #4
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x21c>
 8002476:	2300      	movs	r3, #0
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002488:	4934      	ldr	r1, [pc, #208]	; (800255c <HAL_GPIO_Init+0x300>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002496:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_GPIO_Init+0x320>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ba:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_GPIO_Init+0x320>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_GPIO_Init+0x320>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e4:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_GPIO_Init+0x320>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_GPIO_Init+0x320>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_GPIO_Init+0x320>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_GPIO_Init+0x320>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_GPIO_Init+0x320>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f67f ae96 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800254c:	bf00      	nop
 800254e:	3724      	adds	r7, #36	; 0x24
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40023800 	.word	0x40023800
 800255c:	40013800 	.word	0x40013800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40021400 	.word	0x40021400
 8002578:	40021800 	.word	0x40021800
 800257c:	40013c00 	.word	0x40013c00

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0cc      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90c      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d044      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d119      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e067      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4934      	ldr	r1, [pc, #208]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f8fc 	bl	80018a0 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff f8f8 	bl	80018a0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f855 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 800273e:	4601      	mov	r1, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	fa21 f303 	lsr.w	r3, r1, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f85c 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	08005a2c 	.word	0x08005a2c
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_GetHCLKFreq+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff0 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027a0:	4601      	mov	r1, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4a03      	ldr	r2, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08005a3c 	.word	0x08005a3c

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffdc 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0b5b      	lsrs	r3, r3, #13
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08005a3c 	.word	0x08005a3c

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bc6      	ldr	r3, [pc, #792]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b0c      	cmp	r3, #12
 800280c:	f200 817e 	bhi.w	8002b0c <HAL_RCC_GetSysClockFreq+0x324>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x30>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002b0d 	.word	0x08002b0d
 8002820:	08002b0d 	.word	0x08002b0d
 8002824:	08002b0d 	.word	0x08002b0d
 8002828:	08002853 	.word	0x08002853
 800282c:	08002b0d 	.word	0x08002b0d
 8002830:	08002b0d 	.word	0x08002b0d
 8002834:	08002b0d 	.word	0x08002b0d
 8002838:	08002859 	.word	0x08002859
 800283c:	08002b0d 	.word	0x08002b0d
 8002840:	08002b0d 	.word	0x08002b0d
 8002844:	08002b0d 	.word	0x08002b0d
 8002848:	080029b5 	.word	0x080029b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4bb4      	ldr	r3, [pc, #720]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x338>)
 800284e:	613b      	str	r3, [r7, #16]
       break;
 8002850:	e15f      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002852:	4bb4      	ldr	r3, [pc, #720]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002854:	613b      	str	r3, [r7, #16]
      break;
 8002856:	e15c      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002858:	4bb0      	ldr	r3, [pc, #704]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002860:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002862:	4bae      	ldr	r3, [pc, #696]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d04a      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286e:	4bab      	ldr	r3, [pc, #684]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	099b      	lsrs	r3, r3, #6
 8002874:	f04f 0400 	mov.w	r4, #0
 8002878:	f240 11ff 	movw	r1, #511	; 0x1ff
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	ea03 0501 	and.w	r5, r3, r1
 8002884:	ea04 0602 	and.w	r6, r4, r2
 8002888:	4629      	mov	r1, r5
 800288a:	4632      	mov	r2, r6
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	f04f 0400 	mov.w	r4, #0
 8002894:	0154      	lsls	r4, r2, #5
 8002896:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800289a:	014b      	lsls	r3, r1, #5
 800289c:	4619      	mov	r1, r3
 800289e:	4622      	mov	r2, r4
 80028a0:	1b49      	subs	r1, r1, r5
 80028a2:	eb62 0206 	sbc.w	r2, r2, r6
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	f04f 0400 	mov.w	r4, #0
 80028ae:	0194      	lsls	r4, r2, #6
 80028b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028b4:	018b      	lsls	r3, r1, #6
 80028b6:	1a5b      	subs	r3, r3, r1
 80028b8:	eb64 0402 	sbc.w	r4, r4, r2
 80028bc:	f04f 0100 	mov.w	r1, #0
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	00e2      	lsls	r2, r4, #3
 80028c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028ca:	00d9      	lsls	r1, r3, #3
 80028cc:	460b      	mov	r3, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	195b      	adds	r3, r3, r5
 80028d2:	eb44 0406 	adc.w	r4, r4, r6
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	0262      	lsls	r2, r4, #9
 80028e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028e4:	0259      	lsls	r1, r3, #9
 80028e6:	460b      	mov	r3, r1
 80028e8:	4614      	mov	r4, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	4621      	mov	r1, r4
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4623      	mov	r3, r4
 80028f8:	f7fe f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80028fc:	4603      	mov	r3, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e049      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002904:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	f04f 0400 	mov.w	r4, #0
 800290e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	ea03 0501 	and.w	r5, r3, r1
 800291a:	ea04 0602 	and.w	r6, r4, r2
 800291e:	4629      	mov	r1, r5
 8002920:	4632      	mov	r2, r6
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f04f 0400 	mov.w	r4, #0
 800292a:	0154      	lsls	r4, r2, #5
 800292c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002930:	014b      	lsls	r3, r1, #5
 8002932:	4619      	mov	r1, r3
 8002934:	4622      	mov	r2, r4
 8002936:	1b49      	subs	r1, r1, r5
 8002938:	eb62 0206 	sbc.w	r2, r2, r6
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	f04f 0400 	mov.w	r4, #0
 8002944:	0194      	lsls	r4, r2, #6
 8002946:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800294a:	018b      	lsls	r3, r1, #6
 800294c:	1a5b      	subs	r3, r3, r1
 800294e:	eb64 0402 	sbc.w	r4, r4, r2
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	00e2      	lsls	r2, r4, #3
 800295c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002960:	00d9      	lsls	r1, r3, #3
 8002962:	460b      	mov	r3, r1
 8002964:	4614      	mov	r4, r2
 8002966:	195b      	adds	r3, r3, r5
 8002968:	eb44 0406 	adc.w	r4, r4, r6
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	02a2      	lsls	r2, r4, #10
 8002976:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800297a:	0299      	lsls	r1, r3, #10
 800297c:	460b      	mov	r3, r1
 800297e:	4614      	mov	r4, r2
 8002980:	4618      	mov	r0, r3
 8002982:	4621      	mov	r1, r4
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	461a      	mov	r2, r3
 800298c:	4623      	mov	r3, r4
 800298e:	f7fe f97b 	bl	8000c88 <__aeabi_uldivmod>
 8002992:	4603      	mov	r3, r0
 8002994:	460c      	mov	r4, r1
 8002996:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002998:	4b60      	ldr	r3, [pc, #384]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	613b      	str	r3, [r7, #16]
      break;
 80029b2:	e0ae      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04a      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea03 0501 	and.w	r5, r3, r1
 80029e0:	ea04 0602 	and.w	r6, r4, r2
 80029e4:	4629      	mov	r1, r5
 80029e6:	4632      	mov	r2, r6
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f04f 0400 	mov.w	r4, #0
 80029f0:	0154      	lsls	r4, r2, #5
 80029f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	4619      	mov	r1, r3
 80029fa:	4622      	mov	r2, r4
 80029fc:	1b49      	subs	r1, r1, r5
 80029fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0194      	lsls	r4, r2, #6
 8002a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a10:	018b      	lsls	r3, r1, #6
 8002a12:	1a5b      	subs	r3, r3, r1
 8002a14:	eb64 0402 	sbc.w	r4, r4, r2
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	00e2      	lsls	r2, r4, #3
 8002a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	195b      	adds	r3, r3, r5
 8002a2e:	eb44 0406 	adc.w	r4, r4, r6
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	0262      	lsls	r2, r4, #9
 8002a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a40:	0259      	lsls	r1, r3, #9
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	4621      	mov	r1, r4
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	461a      	mov	r2, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	f7fe f918 	bl	8000c88 <__aeabi_uldivmod>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e049      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	ea03 0501 	and.w	r5, r3, r1
 8002a76:	ea04 0602 	and.w	r6, r4, r2
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4632      	mov	r2, r6
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f04f 0400 	mov.w	r4, #0
 8002a86:	0154      	lsls	r4, r2, #5
 8002a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a8c:	014b      	lsls	r3, r1, #5
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4622      	mov	r2, r4
 8002a92:	1b49      	subs	r1, r1, r5
 8002a94:	eb62 0206 	sbc.w	r2, r2, r6
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	0194      	lsls	r4, r2, #6
 8002aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aa6:	018b      	lsls	r3, r1, #6
 8002aa8:	1a5b      	subs	r3, r3, r1
 8002aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	00e2      	lsls	r2, r4, #3
 8002ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002abc:	00d9      	lsls	r1, r3, #3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	195b      	adds	r3, r3, r5
 8002ac4:	eb44 0406 	adc.w	r4, r4, r6
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	02a2      	lsls	r2, r4, #10
 8002ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ad6:	0299      	lsls	r1, r3, #10
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4614      	mov	r4, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	4621      	mov	r1, r4
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f04f 0400 	mov.w	r4, #0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4623      	mov	r3, r4
 8002aea:	f7fe f8cd 	bl	8000c88 <__aeabi_uldivmod>
 8002aee:	4603      	mov	r3, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0f1b      	lsrs	r3, r3, #28
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	613b      	str	r3, [r7, #16]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x338>)
 8002b0e:	613b      	str	r3, [r7, #16]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	693b      	ldr	r3, [r7, #16]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	007a1200 	.word	0x007a1200

08002b28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8083 	beq.w	8002c48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b42:	4b95      	ldr	r3, [pc, #596]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b4e:	4b92      	ldr	r3, [pc, #584]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b5a:	4b8f      	ldr	r3, [pc, #572]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b66:	d00c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b68:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b74:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b82:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d05b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x11e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d157      	bne.n	8002c46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e216      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x8a>
 8002ba4:	4b7c      	ldr	r3, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	e01d      	b.n	8002bee <HAL_RCC_OscConfig+0xc6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xae>
 8002bbc:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b73      	ldr	r3, [pc, #460]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a72      	ldr	r2, [pc, #456]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0xc6>
 8002bd6:	4b70      	ldr	r3, [pc, #448]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6c      	ldr	r2, [pc, #432]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fe53 	bl	80018a0 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fe4f 	bl	80018a0 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	; 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1db      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0xd6>
 8002c1c:	e014      	b.n	8002c48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fe3f 	bl	80018a0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c26:	f7fe fe3b 	bl	80018a0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1c7      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c38:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0xfe>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d06f      	beq.n	8002d34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c78:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d11c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c84:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x180>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e18f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4938      	ldr	r1, [pc, #224]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbc:	e03a      	b.n	8002d34 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d020      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc6:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fde8 	bl	80018a0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fde4 	bl	80018a0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e170      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4925      	ldr	r1, [pc, #148]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
 8002d06:	e015      	b.n	8002d34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x274>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fdc7 	bl	80018a0 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe fdc3 	bl	80018a0 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e14f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d037      	beq.n	8002db0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_RCC_OscConfig+0x278>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fda7 	bl	80018a0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fda3 	bl	80018a0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e12f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x22e>
 8002d74:	e01c      	b.n	8002db0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x278>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fd90 	bl	80018a0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d82:	e00f      	b.n	8002da4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fe fd8c 	bl	80018a0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d908      	bls.n	8002da4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e118      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
 8002da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b8a      	ldr	r3, [pc, #552]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e9      	bne.n	8002d84 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8097 	beq.w	8002eec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b7c      	ldr	r3, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a75      	ldr	r2, [pc, #468]	; (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fd4b 	bl	80018a0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fd47 	bl	80018a0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0d3      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x31a>
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x354>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x33c>
 8002e4a:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a60      	ldr	r2, [pc, #384]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5d      	ldr	r2, [pc, #372]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x354>
 8002e64:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a59      	ldr	r2, [pc, #356]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fd0c 	bl	80018a0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fd08 	bl	80018a0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e092      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCC_OscConfig+0x364>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fcf6 	bl	80018a0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fcf2 	bl	80018a0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e07c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4a3a      	ldr	r2, [pc, #232]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d068      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d060      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d145      	bne.n	8002f94 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fcc7 	bl	80018a0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fcc3 	bl	80018a0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e04f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	019b      	lsls	r3, r3, #6
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	071b      	lsls	r3, r3, #28
 8002f60:	491b      	ldr	r1, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fc98 	bl	80018a0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fc94 	bl	80018a0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e020      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x44c>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_RCC_OscConfig+0x4b0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fc81 	bl	80018a0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fc7d 	bl	80018a0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x4a8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x47a>
 8002fc0:	e001      	b.n	8002fc6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42470060 	.word	0x42470060

08002fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e03f      	b.n	800306e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fafa 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f90b 	bl	800323c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	f040 8083 	bne.w	800319e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit+0x2e>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07b      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Transmit+0x40>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e074      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2221      	movs	r2, #33	; 0x21
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030cc:	f7fe fbe8 	bl	80018a0 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030e6:	e042      	b.n	800316e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d122      	bne.n	8003146 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f84c 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e042      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3302      	adds	r3, #2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e017      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3301      	adds	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	e013      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f829 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e01f      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	60ba      	str	r2, [r7, #8]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1b7      	bne.n	80030e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f810 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e006      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b8:	e02c      	b.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d028      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031c8:	f7fe fb6a 	bl	80018a0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d21d      	bcs.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e00f      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d0c3      	beq.n	80031ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800327e:	f023 030c 	bic.w	r3, r3, #12
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	430b      	orrs	r3, r1
 800328a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032aa:	f040 818b 	bne.w	80035c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4ac1      	ldr	r2, [pc, #772]	; (80035b8 <UART_SetConfig+0x37c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d005      	beq.n	80032c4 <UART_SetConfig+0x88>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4abf      	ldr	r2, [pc, #764]	; (80035bc <UART_SetConfig+0x380>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f040 80bd 	bne.w	800343e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7ff fa7c 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 80032c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	461d      	mov	r5, r3
 80032ce:	f04f 0600 	mov.w	r6, #0
 80032d2:	46a8      	mov	r8, r5
 80032d4:	46b1      	mov	r9, r6
 80032d6:	eb18 0308 	adds.w	r3, r8, r8
 80032da:	eb49 0409 	adc.w	r4, r9, r9
 80032de:	4698      	mov	r8, r3
 80032e0:	46a1      	mov	r9, r4
 80032e2:	eb18 0805 	adds.w	r8, r8, r5
 80032e6:	eb49 0906 	adc.w	r9, r9, r6
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032fe:	4688      	mov	r8, r1
 8003300:	4691      	mov	r9, r2
 8003302:	eb18 0005 	adds.w	r0, r8, r5
 8003306:	eb49 0106 	adc.w	r1, r9, r6
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	461d      	mov	r5, r3
 8003310:	f04f 0600 	mov.w	r6, #0
 8003314:	196b      	adds	r3, r5, r5
 8003316:	eb46 0406 	adc.w	r4, r6, r6
 800331a:	461a      	mov	r2, r3
 800331c:	4623      	mov	r3, r4
 800331e:	f7fd fcb3 	bl	8000c88 <__aeabi_uldivmod>
 8003322:	4603      	mov	r3, r0
 8003324:	460c      	mov	r4, r1
 8003326:	461a      	mov	r2, r3
 8003328:	4ba5      	ldr	r3, [pc, #660]	; (80035c0 <UART_SetConfig+0x384>)
 800332a:	fba3 2302 	umull	r2, r3, r3, r2
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	461d      	mov	r5, r3
 8003338:	f04f 0600 	mov.w	r6, #0
 800333c:	46a9      	mov	r9, r5
 800333e:	46b2      	mov	sl, r6
 8003340:	eb19 0309 	adds.w	r3, r9, r9
 8003344:	eb4a 040a 	adc.w	r4, sl, sl
 8003348:	4699      	mov	r9, r3
 800334a:	46a2      	mov	sl, r4
 800334c:	eb19 0905 	adds.w	r9, r9, r5
 8003350:	eb4a 0a06 	adc.w	sl, sl, r6
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003368:	4689      	mov	r9, r1
 800336a:	4692      	mov	sl, r2
 800336c:	eb19 0005 	adds.w	r0, r9, r5
 8003370:	eb4a 0106 	adc.w	r1, sl, r6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	461d      	mov	r5, r3
 800337a:	f04f 0600 	mov.w	r6, #0
 800337e:	196b      	adds	r3, r5, r5
 8003380:	eb46 0406 	adc.w	r4, r6, r6
 8003384:	461a      	mov	r2, r3
 8003386:	4623      	mov	r3, r4
 8003388:	f7fd fc7e 	bl	8000c88 <__aeabi_uldivmod>
 800338c:	4603      	mov	r3, r0
 800338e:	460c      	mov	r4, r1
 8003390:	461a      	mov	r2, r3
 8003392:	4b8b      	ldr	r3, [pc, #556]	; (80035c0 <UART_SetConfig+0x384>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a86      	ldr	r2, [pc, #536]	; (80035c0 <UART_SetConfig+0x384>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033b4:	4498      	add	r8, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	461d      	mov	r5, r3
 80033ba:	f04f 0600 	mov.w	r6, #0
 80033be:	46a9      	mov	r9, r5
 80033c0:	46b2      	mov	sl, r6
 80033c2:	eb19 0309 	adds.w	r3, r9, r9
 80033c6:	eb4a 040a 	adc.w	r4, sl, sl
 80033ca:	4699      	mov	r9, r3
 80033cc:	46a2      	mov	sl, r4
 80033ce:	eb19 0905 	adds.w	r9, r9, r5
 80033d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ea:	4689      	mov	r9, r1
 80033ec:	4692      	mov	sl, r2
 80033ee:	eb19 0005 	adds.w	r0, r9, r5
 80033f2:	eb4a 0106 	adc.w	r1, sl, r6
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	461d      	mov	r5, r3
 80033fc:	f04f 0600 	mov.w	r6, #0
 8003400:	196b      	adds	r3, r5, r5
 8003402:	eb46 0406 	adc.w	r4, r6, r6
 8003406:	461a      	mov	r2, r3
 8003408:	4623      	mov	r3, r4
 800340a:	f7fd fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	461a      	mov	r2, r3
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <UART_SetConfig+0x384>)
 8003416:	fba3 1302 	umull	r1, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2164      	movs	r1, #100	; 0x64
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	3332      	adds	r3, #50	; 0x32
 8003428:	4a65      	ldr	r2, [pc, #404]	; (80035c0 <UART_SetConfig+0x384>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	f003 0207 	and.w	r2, r3, #7
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4442      	add	r2, r8
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e26f      	b.n	800391e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800343e:	f7ff f9ab 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8003442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	461d      	mov	r5, r3
 8003448:	f04f 0600 	mov.w	r6, #0
 800344c:	46a8      	mov	r8, r5
 800344e:	46b1      	mov	r9, r6
 8003450:	eb18 0308 	adds.w	r3, r8, r8
 8003454:	eb49 0409 	adc.w	r4, r9, r9
 8003458:	4698      	mov	r8, r3
 800345a:	46a1      	mov	r9, r4
 800345c:	eb18 0805 	adds.w	r8, r8, r5
 8003460:	eb49 0906 	adc.w	r9, r9, r6
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003478:	4688      	mov	r8, r1
 800347a:	4691      	mov	r9, r2
 800347c:	eb18 0005 	adds.w	r0, r8, r5
 8003480:	eb49 0106 	adc.w	r1, r9, r6
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	461d      	mov	r5, r3
 800348a:	f04f 0600 	mov.w	r6, #0
 800348e:	196b      	adds	r3, r5, r5
 8003490:	eb46 0406 	adc.w	r4, r6, r6
 8003494:	461a      	mov	r2, r3
 8003496:	4623      	mov	r3, r4
 8003498:	f7fd fbf6 	bl	8000c88 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <UART_SetConfig+0x384>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	461d      	mov	r5, r3
 80034b2:	f04f 0600 	mov.w	r6, #0
 80034b6:	46a9      	mov	r9, r5
 80034b8:	46b2      	mov	sl, r6
 80034ba:	eb19 0309 	adds.w	r3, r9, r9
 80034be:	eb4a 040a 	adc.w	r4, sl, sl
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	eb19 0905 	adds.w	r9, r9, r5
 80034ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e2:	4689      	mov	r9, r1
 80034e4:	4692      	mov	sl, r2
 80034e6:	eb19 0005 	adds.w	r0, r9, r5
 80034ea:	eb4a 0106 	adc.w	r1, sl, r6
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	461d      	mov	r5, r3
 80034f4:	f04f 0600 	mov.w	r6, #0
 80034f8:	196b      	adds	r3, r5, r5
 80034fa:	eb46 0406 	adc.w	r4, r6, r6
 80034fe:	461a      	mov	r2, r3
 8003500:	4623      	mov	r3, r4
 8003502:	f7fd fbc1 	bl	8000c88 <__aeabi_uldivmod>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	461a      	mov	r2, r3
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <UART_SetConfig+0x384>)
 800350e:	fba3 1302 	umull	r1, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2164      	movs	r1, #100	; 0x64
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	3332      	adds	r3, #50	; 0x32
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <UART_SetConfig+0x384>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800352e:	4498      	add	r8, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	461d      	mov	r5, r3
 8003534:	f04f 0600 	mov.w	r6, #0
 8003538:	46a9      	mov	r9, r5
 800353a:	46b2      	mov	sl, r6
 800353c:	eb19 0309 	adds.w	r3, r9, r9
 8003540:	eb4a 040a 	adc.w	r4, sl, sl
 8003544:	4699      	mov	r9, r3
 8003546:	46a2      	mov	sl, r4
 8003548:	eb19 0905 	adds.w	r9, r9, r5
 800354c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800355c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003560:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003564:	4689      	mov	r9, r1
 8003566:	4692      	mov	sl, r2
 8003568:	eb19 0005 	adds.w	r0, r9, r5
 800356c:	eb4a 0106 	adc.w	r1, sl, r6
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	461d      	mov	r5, r3
 8003576:	f04f 0600 	mov.w	r6, #0
 800357a:	196b      	adds	r3, r5, r5
 800357c:	eb46 0406 	adc.w	r4, r6, r6
 8003580:	461a      	mov	r2, r3
 8003582:	4623      	mov	r3, r4
 8003584:	f7fd fb80 	bl	8000c88 <__aeabi_uldivmod>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	461a      	mov	r2, r3
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <UART_SetConfig+0x384>)
 8003590:	fba3 1302 	umull	r1, r3, r3, r2
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	2164      	movs	r1, #100	; 0x64
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	3332      	adds	r3, #50	; 0x32
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <UART_SetConfig+0x384>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	f003 0207 	and.w	r2, r3, #7
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4442      	add	r2, r8
 80035b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035b6:	e1b2      	b.n	800391e <UART_SetConfig+0x6e2>
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4ad7      	ldr	r2, [pc, #860]	; (8003928 <UART_SetConfig+0x6ec>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d005      	beq.n	80035da <UART_SetConfig+0x39e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4ad6      	ldr	r2, [pc, #856]	; (800392c <UART_SetConfig+0x6f0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f040 80d1 	bne.w	800377c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035da:	f7ff f8f1 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 80035de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	469a      	mov	sl, r3
 80035e4:	f04f 0b00 	mov.w	fp, #0
 80035e8:	46d0      	mov	r8, sl
 80035ea:	46d9      	mov	r9, fp
 80035ec:	eb18 0308 	adds.w	r3, r8, r8
 80035f0:	eb49 0409 	adc.w	r4, r9, r9
 80035f4:	4698      	mov	r8, r3
 80035f6:	46a1      	mov	r9, r4
 80035f8:	eb18 080a 	adds.w	r8, r8, sl
 80035fc:	eb49 090b 	adc.w	r9, r9, fp
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800360c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003610:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003614:	4688      	mov	r8, r1
 8003616:	4691      	mov	r9, r2
 8003618:	eb1a 0508 	adds.w	r5, sl, r8
 800361c:	eb4b 0609 	adc.w	r6, fp, r9
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	f04f 0400 	mov.w	r4, #0
 8003632:	0094      	lsls	r4, r2, #2
 8003634:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003638:	008b      	lsls	r3, r1, #2
 800363a:	461a      	mov	r2, r3
 800363c:	4623      	mov	r3, r4
 800363e:	4628      	mov	r0, r5
 8003640:	4631      	mov	r1, r6
 8003642:	f7fd fb21 	bl	8000c88 <__aeabi_uldivmod>
 8003646:	4603      	mov	r3, r0
 8003648:	460c      	mov	r4, r1
 800364a:	461a      	mov	r2, r3
 800364c:	4bb8      	ldr	r3, [pc, #736]	; (8003930 <UART_SetConfig+0x6f4>)
 800364e:	fba3 2302 	umull	r2, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	469b      	mov	fp, r3
 800365c:	f04f 0c00 	mov.w	ip, #0
 8003660:	46d9      	mov	r9, fp
 8003662:	46e2      	mov	sl, ip
 8003664:	eb19 0309 	adds.w	r3, r9, r9
 8003668:	eb4a 040a 	adc.w	r4, sl, sl
 800366c:	4699      	mov	r9, r3
 800366e:	46a2      	mov	sl, r4
 8003670:	eb19 090b 	adds.w	r9, r9, fp
 8003674:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003684:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003688:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800368c:	4689      	mov	r9, r1
 800368e:	4692      	mov	sl, r2
 8003690:	eb1b 0509 	adds.w	r5, fp, r9
 8003694:	eb4c 060a 	adc.w	r6, ip, sl
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	0094      	lsls	r4, r2, #2
 80036ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036b0:	008b      	lsls	r3, r1, #2
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	4628      	mov	r0, r5
 80036b8:	4631      	mov	r1, r6
 80036ba:	f7fd fae5 	bl	8000c88 <__aeabi_uldivmod>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b9a      	ldr	r3, [pc, #616]	; (8003930 <UART_SetConfig+0x6f4>)
 80036c6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a95      	ldr	r2, [pc, #596]	; (8003930 <UART_SetConfig+0x6f4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	4498      	add	r8, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	469b      	mov	fp, r3
 80036ea:	f04f 0c00 	mov.w	ip, #0
 80036ee:	46d9      	mov	r9, fp
 80036f0:	46e2      	mov	sl, ip
 80036f2:	eb19 0309 	adds.w	r3, r9, r9
 80036f6:	eb4a 040a 	adc.w	r4, sl, sl
 80036fa:	4699      	mov	r9, r3
 80036fc:	46a2      	mov	sl, r4
 80036fe:	eb19 090b 	adds.w	r9, r9, fp
 8003702:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371a:	4689      	mov	r9, r1
 800371c:	4692      	mov	sl, r2
 800371e:	eb1b 0509 	adds.w	r5, fp, r9
 8003722:	eb4c 060a 	adc.w	r6, ip, sl
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	f04f 0400 	mov.w	r4, #0
 8003738:	0094      	lsls	r4, r2, #2
 800373a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800373e:	008b      	lsls	r3, r1, #2
 8003740:	461a      	mov	r2, r3
 8003742:	4623      	mov	r3, r4
 8003744:	4628      	mov	r0, r5
 8003746:	4631      	mov	r1, r6
 8003748:	f7fd fa9e 	bl	8000c88 <__aeabi_uldivmod>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	461a      	mov	r2, r3
 8003752:	4b77      	ldr	r3, [pc, #476]	; (8003930 <UART_SetConfig+0x6f4>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a72      	ldr	r2, [pc, #456]	; (8003930 <UART_SetConfig+0x6f4>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4442      	add	r2, r8
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	e0d0      	b.n	800391e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f80c 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8003780:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	469a      	mov	sl, r3
 8003786:	f04f 0b00 	mov.w	fp, #0
 800378a:	46d0      	mov	r8, sl
 800378c:	46d9      	mov	r9, fp
 800378e:	eb18 0308 	adds.w	r3, r8, r8
 8003792:	eb49 0409 	adc.w	r4, r9, r9
 8003796:	4698      	mov	r8, r3
 8003798:	46a1      	mov	r9, r4
 800379a:	eb18 080a 	adds.w	r8, r8, sl
 800379e:	eb49 090b 	adc.w	r9, r9, fp
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037b6:	4688      	mov	r8, r1
 80037b8:	4691      	mov	r9, r2
 80037ba:	eb1a 0508 	adds.w	r5, sl, r8
 80037be:	eb4b 0609 	adc.w	r6, fp, r9
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	f04f 0400 	mov.w	r4, #0
 80037d4:	0094      	lsls	r4, r2, #2
 80037d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037da:	008b      	lsls	r3, r1, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	4623      	mov	r3, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	4631      	mov	r1, r6
 80037e4:	f7fd fa50 	bl	8000c88 <__aeabi_uldivmod>
 80037e8:	4603      	mov	r3, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b50      	ldr	r3, [pc, #320]	; (8003930 <UART_SetConfig+0x6f4>)
 80037f0:	fba3 2302 	umull	r2, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	469b      	mov	fp, r3
 80037fe:	f04f 0c00 	mov.w	ip, #0
 8003802:	46d9      	mov	r9, fp
 8003804:	46e2      	mov	sl, ip
 8003806:	eb19 0309 	adds.w	r3, r9, r9
 800380a:	eb4a 040a 	adc.w	r4, sl, sl
 800380e:	4699      	mov	r9, r3
 8003810:	46a2      	mov	sl, r4
 8003812:	eb19 090b 	adds.w	r9, r9, fp
 8003816:	eb4a 0a0c 	adc.w	sl, sl, ip
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003826:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800382a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800382e:	4689      	mov	r9, r1
 8003830:	4692      	mov	sl, r2
 8003832:	eb1b 0509 	adds.w	r5, fp, r9
 8003836:	eb4c 060a 	adc.w	r6, ip, sl
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	0094      	lsls	r4, r2, #2
 800384e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003852:	008b      	lsls	r3, r1, #2
 8003854:	461a      	mov	r2, r3
 8003856:	4623      	mov	r3, r4
 8003858:	4628      	mov	r0, r5
 800385a:	4631      	mov	r1, r6
 800385c:	f7fd fa14 	bl	8000c88 <__aeabi_uldivmod>
 8003860:	4603      	mov	r3, r0
 8003862:	460c      	mov	r4, r1
 8003864:	461a      	mov	r2, r3
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <UART_SetConfig+0x6f4>)
 8003868:	fba3 1302 	umull	r1, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a2d      	ldr	r2, [pc, #180]	; (8003930 <UART_SetConfig+0x6f4>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003886:	4498      	add	r8, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	469b      	mov	fp, r3
 800388c:	f04f 0c00 	mov.w	ip, #0
 8003890:	46d9      	mov	r9, fp
 8003892:	46e2      	mov	sl, ip
 8003894:	eb19 0309 	adds.w	r3, r9, r9
 8003898:	eb4a 040a 	adc.w	r4, sl, sl
 800389c:	4699      	mov	r9, r3
 800389e:	46a2      	mov	sl, r4
 80038a0:	eb19 090b 	adds.w	r9, r9, fp
 80038a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038bc:	4689      	mov	r9, r1
 80038be:	4692      	mov	sl, r2
 80038c0:	eb1b 0509 	adds.w	r5, fp, r9
 80038c4:	eb4c 060a 	adc.w	r6, ip, sl
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	0094      	lsls	r4, r2, #2
 80038dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	4631      	mov	r1, r6
 80038ea:	f7fd f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <UART_SetConfig+0x6f4>)
 80038f6:	fba3 1302 	umull	r1, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2164      	movs	r1, #100	; 0x64
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	3332      	adds	r3, #50	; 0x32
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <UART_SetConfig+0x6f4>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4442      	add	r2, r8
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	e7ff      	b.n	800391e <UART_SetConfig+0x6e2>
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	40011000 	.word	0x40011000
 800392c:	40011400 	.word	0x40011400
 8003930:	51eb851f 	.word	0x51eb851f

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4e0d      	ldr	r6, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1ba4      	subs	r4, r4, r6
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2500      	movs	r5, #0
 800394c:	42a5      	cmp	r5, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4e0b      	ldr	r6, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f002 f85c 	bl	8005a10 <_init>
 8003958:	1ba4      	subs	r4, r4, r6
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2500      	movs	r5, #0
 800395e:	42a5      	cmp	r5, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003968:	4798      	blx	r3
 800396a:	3501      	adds	r5, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003972:	4798      	blx	r3
 8003974:	3501      	adds	r5, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08005ca8 	.word	0x08005ca8
 800397c:	08005ca8 	.word	0x08005ca8
 8003980:	08005ca8 	.word	0x08005ca8
 8003984:	08005cac 	.word	0x08005cac

08003988 <memset>:
 8003988:	4402      	add	r2, r0
 800398a:	4603      	mov	r3, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <__cvt>:
 8003998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	ec55 4b10 	vmov	r4, r5, d0
 80039a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80039a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	460e      	mov	r6, r1
 80039aa:	4691      	mov	r9, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	bfb8      	it	lt
 80039b0:	4622      	movlt	r2, r4
 80039b2:	462b      	mov	r3, r5
 80039b4:	f027 0720 	bic.w	r7, r7, #32
 80039b8:	bfbb      	ittet	lt
 80039ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80039be:	461d      	movlt	r5, r3
 80039c0:	2300      	movge	r3, #0
 80039c2:	232d      	movlt	r3, #45	; 0x2d
 80039c4:	bfb8      	it	lt
 80039c6:	4614      	movlt	r4, r2
 80039c8:	2f46      	cmp	r7, #70	; 0x46
 80039ca:	700b      	strb	r3, [r1, #0]
 80039cc:	d004      	beq.n	80039d8 <__cvt+0x40>
 80039ce:	2f45      	cmp	r7, #69	; 0x45
 80039d0:	d100      	bne.n	80039d4 <__cvt+0x3c>
 80039d2:	3601      	adds	r6, #1
 80039d4:	2102      	movs	r1, #2
 80039d6:	e000      	b.n	80039da <__cvt+0x42>
 80039d8:	2103      	movs	r1, #3
 80039da:	ab03      	add	r3, sp, #12
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	ab02      	add	r3, sp, #8
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4632      	mov	r2, r6
 80039e4:	4653      	mov	r3, sl
 80039e6:	ec45 4b10 	vmov	d0, r4, r5
 80039ea:	f000 fcdd 	bl	80043a8 <_dtoa_r>
 80039ee:	2f47      	cmp	r7, #71	; 0x47
 80039f0:	4680      	mov	r8, r0
 80039f2:	d102      	bne.n	80039fa <__cvt+0x62>
 80039f4:	f019 0f01 	tst.w	r9, #1
 80039f8:	d026      	beq.n	8003a48 <__cvt+0xb0>
 80039fa:	2f46      	cmp	r7, #70	; 0x46
 80039fc:	eb08 0906 	add.w	r9, r8, r6
 8003a00:	d111      	bne.n	8003a26 <__cvt+0x8e>
 8003a02:	f898 3000 	ldrb.w	r3, [r8]
 8003a06:	2b30      	cmp	r3, #48	; 0x30
 8003a08:	d10a      	bne.n	8003a20 <__cvt+0x88>
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fd f879 	bl	8000b08 <__aeabi_dcmpeq>
 8003a16:	b918      	cbnz	r0, 8003a20 <__cvt+0x88>
 8003a18:	f1c6 0601 	rsb	r6, r6, #1
 8003a1c:	f8ca 6000 	str.w	r6, [sl]
 8003a20:	f8da 3000 	ldr.w	r3, [sl]
 8003a24:	4499      	add	r9, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f7fd f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8003a32:	b938      	cbnz	r0, 8003a44 <__cvt+0xac>
 8003a34:	2230      	movs	r2, #48	; 0x30
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	454b      	cmp	r3, r9
 8003a3a:	d205      	bcs.n	8003a48 <__cvt+0xb0>
 8003a3c:	1c59      	adds	r1, r3, #1
 8003a3e:	9103      	str	r1, [sp, #12]
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e7f8      	b.n	8003a36 <__cvt+0x9e>
 8003a44:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a4c:	eba3 0308 	sub.w	r3, r3, r8
 8003a50:	4640      	mov	r0, r8
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	b004      	add	sp, #16
 8003a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a5a <__exponent>:
 8003a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	4604      	mov	r4, r0
 8003a60:	bfba      	itte	lt
 8003a62:	4249      	neglt	r1, r1
 8003a64:	232d      	movlt	r3, #45	; 0x2d
 8003a66:	232b      	movge	r3, #43	; 0x2b
 8003a68:	2909      	cmp	r1, #9
 8003a6a:	f804 2b02 	strb.w	r2, [r4], #2
 8003a6e:	7043      	strb	r3, [r0, #1]
 8003a70:	dd20      	ble.n	8003ab4 <__exponent+0x5a>
 8003a72:	f10d 0307 	add.w	r3, sp, #7
 8003a76:	461f      	mov	r7, r3
 8003a78:	260a      	movs	r6, #10
 8003a7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a7e:	fb06 1115 	mls	r1, r6, r5, r1
 8003a82:	3130      	adds	r1, #48	; 0x30
 8003a84:	2d09      	cmp	r5, #9
 8003a86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a8a:	f103 32ff 	add.w	r2, r3, #4294967295
 8003a8e:	4629      	mov	r1, r5
 8003a90:	dc09      	bgt.n	8003aa6 <__exponent+0x4c>
 8003a92:	3130      	adds	r1, #48	; 0x30
 8003a94:	3b02      	subs	r3, #2
 8003a96:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a9a:	42bb      	cmp	r3, r7
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	d304      	bcc.n	8003aaa <__exponent+0x50>
 8003aa0:	1a10      	subs	r0, r2, r0
 8003aa2:	b003      	add	sp, #12
 8003aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	e7e7      	b.n	8003a7a <__exponent+0x20>
 8003aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aae:	f804 2b01 	strb.w	r2, [r4], #1
 8003ab2:	e7f2      	b.n	8003a9a <__exponent+0x40>
 8003ab4:	2330      	movs	r3, #48	; 0x30
 8003ab6:	4419      	add	r1, r3
 8003ab8:	7083      	strb	r3, [r0, #2]
 8003aba:	1d02      	adds	r2, r0, #4
 8003abc:	70c1      	strb	r1, [r0, #3]
 8003abe:	e7ef      	b.n	8003aa0 <__exponent+0x46>

08003ac0 <_printf_float>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	b08d      	sub	sp, #52	; 0x34
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003acc:	4616      	mov	r6, r2
 8003ace:	461f      	mov	r7, r3
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	f001 fa21 	bl	8004f18 <_localeconv_r>
 8003ad6:	6803      	ldr	r3, [r0, #0]
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fb98 	bl	8000210 <strlen>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae8:	9005      	str	r0, [sp, #20]
 8003aea:	3307      	adds	r3, #7
 8003aec:	f023 0307 	bic.w	r3, r3, #7
 8003af0:	f103 0208 	add.w	r2, r3, #8
 8003af4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003af8:	f8d4 b000 	ldr.w	fp, [r4]
 8003afc:	f8c8 2000 	str.w	r2, [r8]
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003b08:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003b0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003b10:	9307      	str	r3, [sp, #28]
 8003b12:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1a:	4ba7      	ldr	r3, [pc, #668]	; (8003db8 <_printf_float+0x2f8>)
 8003b1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b20:	f7fd f824 	bl	8000b6c <__aeabi_dcmpun>
 8003b24:	bb70      	cbnz	r0, 8003b84 <_printf_float+0xc4>
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2a:	4ba3      	ldr	r3, [pc, #652]	; (8003db8 <_printf_float+0x2f8>)
 8003b2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b30:	f7fc fffe 	bl	8000b30 <__aeabi_dcmple>
 8003b34:	bb30      	cbnz	r0, 8003b84 <_printf_float+0xc4>
 8003b36:	2200      	movs	r2, #0
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	f7fc ffed 	bl	8000b1c <__aeabi_dcmplt>
 8003b42:	b110      	cbz	r0, 8003b4a <_printf_float+0x8a>
 8003b44:	232d      	movs	r3, #45	; 0x2d
 8003b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4a:	4a9c      	ldr	r2, [pc, #624]	; (8003dbc <_printf_float+0x2fc>)
 8003b4c:	4b9c      	ldr	r3, [pc, #624]	; (8003dc0 <_printf_float+0x300>)
 8003b4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b52:	bf8c      	ite	hi
 8003b54:	4690      	movhi	r8, r2
 8003b56:	4698      	movls	r8, r3
 8003b58:	2303      	movs	r3, #3
 8003b5a:	f02b 0204 	bic.w	r2, fp, #4
 8003b5e:	6123      	str	r3, [r4, #16]
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	f04f 0900 	mov.w	r9, #0
 8003b66:	9700      	str	r7, [sp, #0]
 8003b68:	4633      	mov	r3, r6
 8003b6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f9e6 	bl	8003f40 <_printf_common>
 8003b74:	3001      	adds	r0, #1
 8003b76:	f040 808d 	bne.w	8003c94 <_printf_float+0x1d4>
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	b00d      	add	sp, #52	; 0x34
 8003b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	4640      	mov	r0, r8
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	f7fc ffee 	bl	8000b6c <__aeabi_dcmpun>
 8003b90:	b110      	cbz	r0, 8003b98 <_printf_float+0xd8>
 8003b92:	4a8c      	ldr	r2, [pc, #560]	; (8003dc4 <_printf_float+0x304>)
 8003b94:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <_printf_float+0x308>)
 8003b96:	e7da      	b.n	8003b4e <_printf_float+0x8e>
 8003b98:	6861      	ldr	r1, [r4, #4]
 8003b9a:	1c4b      	adds	r3, r1, #1
 8003b9c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003ba0:	a80a      	add	r0, sp, #40	; 0x28
 8003ba2:	d13e      	bne.n	8003c22 <_printf_float+0x162>
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003bae:	ab09      	add	r3, sp, #36	; 0x24
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	ec49 8b10 	vmov	d0, r8, r9
 8003bb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	f8cd a004 	str.w	sl, [sp, #4]
 8003bc0:	6861      	ldr	r1, [r4, #4]
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f7ff fee8 	bl	8003998 <__cvt>
 8003bc8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003bcc:	2b47      	cmp	r3, #71	; 0x47
 8003bce:	4680      	mov	r8, r0
 8003bd0:	d109      	bne.n	8003be6 <_printf_float+0x126>
 8003bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd4:	1cd8      	adds	r0, r3, #3
 8003bd6:	db02      	blt.n	8003bde <_printf_float+0x11e>
 8003bd8:	6862      	ldr	r2, [r4, #4]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	dd47      	ble.n	8003c6e <_printf_float+0x1ae>
 8003bde:	f1aa 0a02 	sub.w	sl, sl, #2
 8003be2:	fa5f fa8a 	uxtb.w	sl, sl
 8003be6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bec:	d824      	bhi.n	8003c38 <_printf_float+0x178>
 8003bee:	3901      	subs	r1, #1
 8003bf0:	4652      	mov	r2, sl
 8003bf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bf6:	9109      	str	r1, [sp, #36]	; 0x24
 8003bf8:	f7ff ff2f 	bl	8003a5a <__exponent>
 8003bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bfe:	1813      	adds	r3, r2, r0
 8003c00:	2a01      	cmp	r2, #1
 8003c02:	4681      	mov	r9, r0
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	dc02      	bgt.n	8003c0e <_printf_float+0x14e>
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	07d1      	lsls	r1, r2, #31
 8003c0c:	d501      	bpl.n	8003c12 <_printf_float+0x152>
 8003c0e:	3301      	adds	r3, #1
 8003c10:	6123      	str	r3, [r4, #16]
 8003c12:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0a5      	beq.n	8003b66 <_printf_float+0xa6>
 8003c1a:	232d      	movs	r3, #45	; 0x2d
 8003c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c20:	e7a1      	b.n	8003b66 <_printf_float+0xa6>
 8003c22:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003c26:	f000 8177 	beq.w	8003f18 <_printf_float+0x458>
 8003c2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003c2e:	d1bb      	bne.n	8003ba8 <_printf_float+0xe8>
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d1b9      	bne.n	8003ba8 <_printf_float+0xe8>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e7b6      	b.n	8003ba6 <_printf_float+0xe6>
 8003c38:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003c3c:	d119      	bne.n	8003c72 <_printf_float+0x1b2>
 8003c3e:	2900      	cmp	r1, #0
 8003c40:	6863      	ldr	r3, [r4, #4]
 8003c42:	dd0c      	ble.n	8003c5e <_printf_float+0x19e>
 8003c44:	6121      	str	r1, [r4, #16]
 8003c46:	b913      	cbnz	r3, 8003c4e <_printf_float+0x18e>
 8003c48:	6822      	ldr	r2, [r4, #0]
 8003c4a:	07d2      	lsls	r2, r2, #31
 8003c4c:	d502      	bpl.n	8003c54 <_printf_float+0x194>
 8003c4e:	3301      	adds	r3, #1
 8003c50:	440b      	add	r3, r1
 8003c52:	6123      	str	r3, [r4, #16]
 8003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c56:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c58:	f04f 0900 	mov.w	r9, #0
 8003c5c:	e7d9      	b.n	8003c12 <_printf_float+0x152>
 8003c5e:	b913      	cbnz	r3, 8003c66 <_printf_float+0x1a6>
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	07d0      	lsls	r0, r2, #31
 8003c64:	d501      	bpl.n	8003c6a <_printf_float+0x1aa>
 8003c66:	3302      	adds	r3, #2
 8003c68:	e7f3      	b.n	8003c52 <_printf_float+0x192>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e7f1      	b.n	8003c52 <_printf_float+0x192>
 8003c6e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003c72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003c76:	4293      	cmp	r3, r2
 8003c78:	db05      	blt.n	8003c86 <_printf_float+0x1c6>
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	6123      	str	r3, [r4, #16]
 8003c7e:	07d1      	lsls	r1, r2, #31
 8003c80:	d5e8      	bpl.n	8003c54 <_printf_float+0x194>
 8003c82:	3301      	adds	r3, #1
 8003c84:	e7e5      	b.n	8003c52 <_printf_float+0x192>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfd4      	ite	le
 8003c8a:	f1c3 0302 	rsble	r3, r3, #2
 8003c8e:	2301      	movgt	r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	e7de      	b.n	8003c52 <_printf_float+0x192>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	055a      	lsls	r2, r3, #21
 8003c98:	d407      	bmi.n	8003caa <_printf_float+0x1ea>
 8003c9a:	6923      	ldr	r3, [r4, #16]
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b8      	blx	r7
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d12b      	bne.n	8003d00 <_printf_float+0x240>
 8003ca8:	e767      	b.n	8003b7a <_printf_float+0xba>
 8003caa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003cae:	f240 80dc 	bls.w	8003e6a <_printf_float+0x3aa>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cba:	f7fc ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d033      	beq.n	8003d2a <_printf_float+0x26a>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <_printf_float+0x30c>)
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	4628      	mov	r0, r5
 8003cca:	47b8      	blx	r7
 8003ccc:	3001      	adds	r0, #1
 8003cce:	f43f af54 	beq.w	8003b7a <_printf_float+0xba>
 8003cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	db02      	blt.n	8003ce0 <_printf_float+0x220>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	07d8      	lsls	r0, r3, #31
 8003cde:	d50f      	bpl.n	8003d00 <_printf_float+0x240>
 8003ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	f43f af45 	beq.w	8003b7a <_printf_float+0xba>
 8003cf0:	f04f 0800 	mov.w	r8, #0
 8003cf4:	f104 091a 	add.w	r9, r4, #26
 8003cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4543      	cmp	r3, r8
 8003cfe:	dc09      	bgt.n	8003d14 <_printf_float+0x254>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	079b      	lsls	r3, r3, #30
 8003d04:	f100 8103 	bmi.w	8003f0e <_printf_float+0x44e>
 8003d08:	68e0      	ldr	r0, [r4, #12]
 8003d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d0c:	4298      	cmp	r0, r3
 8003d0e:	bfb8      	it	lt
 8003d10:	4618      	movlt	r0, r3
 8003d12:	e734      	b.n	8003b7e <_printf_float+0xbe>
 8003d14:	2301      	movs	r3, #1
 8003d16:	464a      	mov	r2, r9
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f af2b 	beq.w	8003b7a <_printf_float+0xba>
 8003d24:	f108 0801 	add.w	r8, r8, #1
 8003d28:	e7e6      	b.n	8003cf8 <_printf_float+0x238>
 8003d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	dc2b      	bgt.n	8003d88 <_printf_float+0x2c8>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <_printf_float+0x30c>)
 8003d34:	4631      	mov	r1, r6
 8003d36:	4628      	mov	r0, r5
 8003d38:	47b8      	blx	r7
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	f43f af1d 	beq.w	8003b7a <_printf_float+0xba>
 8003d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d42:	b923      	cbnz	r3, 8003d4e <_printf_float+0x28e>
 8003d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d46:	b913      	cbnz	r3, 8003d4e <_printf_float+0x28e>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	d5d8      	bpl.n	8003d00 <_printf_float+0x240>
 8003d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d52:	4631      	mov	r1, r6
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f af0e 	beq.w	8003b7a <_printf_float+0xba>
 8003d5e:	f04f 0900 	mov.w	r9, #0
 8003d62:	f104 0a1a 	add.w	sl, r4, #26
 8003d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d68:	425b      	negs	r3, r3
 8003d6a:	454b      	cmp	r3, r9
 8003d6c:	dc01      	bgt.n	8003d72 <_printf_float+0x2b2>
 8003d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d70:	e794      	b.n	8003c9c <_printf_float+0x1dc>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4652      	mov	r2, sl
 8003d76:	4631      	mov	r1, r6
 8003d78:	4628      	mov	r0, r5
 8003d7a:	47b8      	blx	r7
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	f43f aefc 	beq.w	8003b7a <_printf_float+0xba>
 8003d82:	f109 0901 	add.w	r9, r9, #1
 8003d86:	e7ee      	b.n	8003d66 <_printf_float+0x2a6>
 8003d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	bfa8      	it	ge
 8003d90:	461a      	movge	r2, r3
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	4691      	mov	r9, r2
 8003d96:	dd07      	ble.n	8003da8 <_printf_float+0x2e8>
 8003d98:	4613      	mov	r3, r2
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	4628      	mov	r0, r5
 8003da0:	47b8      	blx	r7
 8003da2:	3001      	adds	r0, #1
 8003da4:	f43f aee9 	beq.w	8003b7a <_printf_float+0xba>
 8003da8:	f104 031a 	add.w	r3, r4, #26
 8003dac:	f04f 0b00 	mov.w	fp, #0
 8003db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003db4:	9306      	str	r3, [sp, #24]
 8003db6:	e015      	b.n	8003de4 <_printf_float+0x324>
 8003db8:	7fefffff 	.word	0x7fefffff
 8003dbc:	08005a48 	.word	0x08005a48
 8003dc0:	08005a44 	.word	0x08005a44
 8003dc4:	08005a50 	.word	0x08005a50
 8003dc8:	08005a4c 	.word	0x08005a4c
 8003dcc:	08005a54 	.word	0x08005a54
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	9a06      	ldr	r2, [sp, #24]
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	47b8      	blx	r7
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f43f aecd 	beq.w	8003b7a <_printf_float+0xba>
 8003de0:	f10b 0b01 	add.w	fp, fp, #1
 8003de4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003de8:	ebaa 0309 	sub.w	r3, sl, r9
 8003dec:	455b      	cmp	r3, fp
 8003dee:	dcef      	bgt.n	8003dd0 <_printf_float+0x310>
 8003df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003df4:	429a      	cmp	r2, r3
 8003df6:	44d0      	add	r8, sl
 8003df8:	db15      	blt.n	8003e26 <_printf_float+0x366>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	07da      	lsls	r2, r3, #31
 8003dfe:	d412      	bmi.n	8003e26 <_printf_float+0x366>
 8003e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e04:	eba3 020a 	sub.w	r2, r3, sl
 8003e08:	eba3 0a01 	sub.w	sl, r3, r1
 8003e0c:	4592      	cmp	sl, r2
 8003e0e:	bfa8      	it	ge
 8003e10:	4692      	movge	sl, r2
 8003e12:	f1ba 0f00 	cmp.w	sl, #0
 8003e16:	dc0e      	bgt.n	8003e36 <_printf_float+0x376>
 8003e18:	f04f 0800 	mov.w	r8, #0
 8003e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e20:	f104 091a 	add.w	r9, r4, #26
 8003e24:	e019      	b.n	8003e5a <_printf_float+0x39a>
 8003e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	47b8      	blx	r7
 8003e30:	3001      	adds	r0, #1
 8003e32:	d1e5      	bne.n	8003e00 <_printf_float+0x340>
 8003e34:	e6a1      	b.n	8003b7a <_printf_float+0xba>
 8003e36:	4653      	mov	r3, sl
 8003e38:	4642      	mov	r2, r8
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	47b8      	blx	r7
 8003e40:	3001      	adds	r0, #1
 8003e42:	d1e9      	bne.n	8003e18 <_printf_float+0x358>
 8003e44:	e699      	b.n	8003b7a <_printf_float+0xba>
 8003e46:	2301      	movs	r3, #1
 8003e48:	464a      	mov	r2, r9
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b8      	blx	r7
 8003e50:	3001      	adds	r0, #1
 8003e52:	f43f ae92 	beq.w	8003b7a <_printf_float+0xba>
 8003e56:	f108 0801 	add.w	r8, r8, #1
 8003e5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	eba3 030a 	sub.w	r3, r3, sl
 8003e64:	4543      	cmp	r3, r8
 8003e66:	dcee      	bgt.n	8003e46 <_printf_float+0x386>
 8003e68:	e74a      	b.n	8003d00 <_printf_float+0x240>
 8003e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e6c:	2a01      	cmp	r2, #1
 8003e6e:	dc01      	bgt.n	8003e74 <_printf_float+0x3b4>
 8003e70:	07db      	lsls	r3, r3, #31
 8003e72:	d53a      	bpl.n	8003eea <_printf_float+0x42a>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4642      	mov	r2, r8
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f ae7b 	beq.w	8003b7a <_printf_float+0xba>
 8003e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e88:	4631      	mov	r1, r6
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	47b8      	blx	r7
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f108 0801 	add.w	r8, r8, #1
 8003e94:	f43f ae71 	beq.w	8003b7a <_printf_float+0xba>
 8003e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f103 3aff 	add.w	sl, r3, #4294967295
 8003ea0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f7fc fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 8003eaa:	b9c8      	cbnz	r0, 8003ee0 <_printf_float+0x420>
 8003eac:	4653      	mov	r3, sl
 8003eae:	4642      	mov	r2, r8
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d10e      	bne.n	8003ed8 <_printf_float+0x418>
 8003eba:	e65e      	b.n	8003b7a <_printf_float+0xba>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	47b8      	blx	r7
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	f43f ae57 	beq.w	8003b7a <_printf_float+0xba>
 8003ecc:	f108 0801 	add.w	r8, r8, #1
 8003ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	4543      	cmp	r3, r8
 8003ed6:	dcf1      	bgt.n	8003ebc <_printf_float+0x3fc>
 8003ed8:	464b      	mov	r3, r9
 8003eda:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ede:	e6de      	b.n	8003c9e <_printf_float+0x1de>
 8003ee0:	f04f 0800 	mov.w	r8, #0
 8003ee4:	f104 0a1a 	add.w	sl, r4, #26
 8003ee8:	e7f2      	b.n	8003ed0 <_printf_float+0x410>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e7df      	b.n	8003eae <_printf_float+0x3ee>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	464a      	mov	r2, r9
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b8      	blx	r7
 8003ef8:	3001      	adds	r0, #1
 8003efa:	f43f ae3e 	beq.w	8003b7a <_printf_float+0xba>
 8003efe:	f108 0801 	add.w	r8, r8, #1
 8003f02:	68e3      	ldr	r3, [r4, #12]
 8003f04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	4543      	cmp	r3, r8
 8003f0a:	dcf0      	bgt.n	8003eee <_printf_float+0x42e>
 8003f0c:	e6fc      	b.n	8003d08 <_printf_float+0x248>
 8003f0e:	f04f 0800 	mov.w	r8, #0
 8003f12:	f104 0919 	add.w	r9, r4, #25
 8003f16:	e7f4      	b.n	8003f02 <_printf_float+0x442>
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	f43f ae8b 	beq.w	8003c34 <_printf_float+0x174>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003f24:	ab09      	add	r3, sp, #36	; 0x24
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	ec49 8b10 	vmov	d0, r8, r9
 8003f2c:	6022      	str	r2, [r4, #0]
 8003f2e:	f8cd a004 	str.w	sl, [sp, #4]
 8003f32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f36:	4628      	mov	r0, r5
 8003f38:	f7ff fd2e 	bl	8003998 <__cvt>
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	e648      	b.n	8003bd2 <_printf_float+0x112>

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4691      	mov	r9, r2
 8003f46:	461f      	mov	r7, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bfb8      	it	lt
 8003f54:	4613      	movlt	r3, r2
 8003f56:	f8c9 3000 	str.w	r3, [r9]
 8003f5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	b112      	cbz	r2, 8003f6a <_printf_common+0x2a>
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c9 3000 	str.w	r3, [r9]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f74:	3302      	addmi	r3, #2
 8003f76:	f8c9 3000 	strmi.w	r3, [r9]
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	f015 0506 	ands.w	r5, r5, #6
 8003f80:	d107      	bne.n	8003f92 <_printf_common+0x52>
 8003f82:	f104 0a19 	add.w	sl, r4, #25
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	f8d9 2000 	ldr.w	r2, [r9]
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	dc28      	bgt.n	8003fe4 <_printf_common+0xa4>
 8003f92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	3300      	adds	r3, #0
 8003f9a:	bf18      	it	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	0692      	lsls	r2, r2, #26
 8003fa0:	d42d      	bmi.n	8003ffe <_printf_common+0xbe>
 8003fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	4630      	mov	r0, r6
 8003faa:	47c0      	blx	r8
 8003fac:	3001      	adds	r0, #1
 8003fae:	d020      	beq.n	8003ff2 <_printf_common+0xb2>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	68e5      	ldr	r5, [r4, #12]
 8003fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb8:	f003 0306 	and.w	r3, r3, #6
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	bf08      	it	eq
 8003fc0:	1aad      	subeq	r5, r5, r2
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	6922      	ldr	r2, [r4, #16]
 8003fc6:	bf0c      	ite	eq
 8003fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fcc:	2500      	movne	r5, #0
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	bfc4      	itt	gt
 8003fd2:	1a9b      	subgt	r3, r3, r2
 8003fd4:	18ed      	addgt	r5, r5, r3
 8003fd6:	f04f 0900 	mov.w	r9, #0
 8003fda:	341a      	adds	r4, #26
 8003fdc:	454d      	cmp	r5, r9
 8003fde:	d11a      	bne.n	8004016 <_printf_common+0xd6>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e008      	b.n	8003ff6 <_printf_common+0xb6>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4652      	mov	r2, sl
 8003fe8:	4639      	mov	r1, r7
 8003fea:	4630      	mov	r0, r6
 8003fec:	47c0      	blx	r8
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d103      	bne.n	8003ffa <_printf_common+0xba>
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffa:	3501      	adds	r5, #1
 8003ffc:	e7c3      	b.n	8003f86 <_printf_common+0x46>
 8003ffe:	18e1      	adds	r1, r4, r3
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	2030      	movs	r0, #48	; 0x30
 8004004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004008:	4422      	add	r2, r4
 800400a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800400e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004012:	3302      	adds	r3, #2
 8004014:	e7c5      	b.n	8003fa2 <_printf_common+0x62>
 8004016:	2301      	movs	r3, #1
 8004018:	4622      	mov	r2, r4
 800401a:	4639      	mov	r1, r7
 800401c:	4630      	mov	r0, r6
 800401e:	47c0      	blx	r8
 8004020:	3001      	adds	r0, #1
 8004022:	d0e6      	beq.n	8003ff2 <_printf_common+0xb2>
 8004024:	f109 0901 	add.w	r9, r9, #1
 8004028:	e7d8      	b.n	8003fdc <_printf_common+0x9c>
	...

0800402c <_printf_i>:
 800402c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004034:	460c      	mov	r4, r1
 8004036:	7e09      	ldrb	r1, [r1, #24]
 8004038:	b085      	sub	sp, #20
 800403a:	296e      	cmp	r1, #110	; 0x6e
 800403c:	4617      	mov	r7, r2
 800403e:	4606      	mov	r6, r0
 8004040:	4698      	mov	r8, r3
 8004042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004044:	f000 80b3 	beq.w	80041ae <_printf_i+0x182>
 8004048:	d822      	bhi.n	8004090 <_printf_i+0x64>
 800404a:	2963      	cmp	r1, #99	; 0x63
 800404c:	d036      	beq.n	80040bc <_printf_i+0x90>
 800404e:	d80a      	bhi.n	8004066 <_printf_i+0x3a>
 8004050:	2900      	cmp	r1, #0
 8004052:	f000 80b9 	beq.w	80041c8 <_printf_i+0x19c>
 8004056:	2958      	cmp	r1, #88	; 0x58
 8004058:	f000 8083 	beq.w	8004162 <_printf_i+0x136>
 800405c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004064:	e032      	b.n	80040cc <_printf_i+0xa0>
 8004066:	2964      	cmp	r1, #100	; 0x64
 8004068:	d001      	beq.n	800406e <_printf_i+0x42>
 800406a:	2969      	cmp	r1, #105	; 0x69
 800406c:	d1f6      	bne.n	800405c <_printf_i+0x30>
 800406e:	6820      	ldr	r0, [r4, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	0605      	lsls	r5, r0, #24
 8004074:	f103 0104 	add.w	r1, r3, #4
 8004078:	d52a      	bpl.n	80040d0 <_printf_i+0xa4>
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6011      	str	r1, [r2, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da03      	bge.n	800408a <_printf_i+0x5e>
 8004082:	222d      	movs	r2, #45	; 0x2d
 8004084:	425b      	negs	r3, r3
 8004086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800408a:	486f      	ldr	r0, [pc, #444]	; (8004248 <_printf_i+0x21c>)
 800408c:	220a      	movs	r2, #10
 800408e:	e039      	b.n	8004104 <_printf_i+0xd8>
 8004090:	2973      	cmp	r1, #115	; 0x73
 8004092:	f000 809d 	beq.w	80041d0 <_printf_i+0x1a4>
 8004096:	d808      	bhi.n	80040aa <_printf_i+0x7e>
 8004098:	296f      	cmp	r1, #111	; 0x6f
 800409a:	d020      	beq.n	80040de <_printf_i+0xb2>
 800409c:	2970      	cmp	r1, #112	; 0x70
 800409e:	d1dd      	bne.n	800405c <_printf_i+0x30>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f043 0320 	orr.w	r3, r3, #32
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	e003      	b.n	80040b2 <_printf_i+0x86>
 80040aa:	2975      	cmp	r1, #117	; 0x75
 80040ac:	d017      	beq.n	80040de <_printf_i+0xb2>
 80040ae:	2978      	cmp	r1, #120	; 0x78
 80040b0:	d1d4      	bne.n	800405c <_printf_i+0x30>
 80040b2:	2378      	movs	r3, #120	; 0x78
 80040b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b8:	4864      	ldr	r0, [pc, #400]	; (800424c <_printf_i+0x220>)
 80040ba:	e055      	b.n	8004168 <_printf_i+0x13c>
 80040bc:	6813      	ldr	r3, [r2, #0]
 80040be:	1d19      	adds	r1, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040cc:	2301      	movs	r3, #1
 80040ce:	e08c      	b.n	80041ea <_printf_i+0x1be>
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6011      	str	r1, [r2, #0]
 80040d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040d8:	bf18      	it	ne
 80040da:	b21b      	sxthne	r3, r3
 80040dc:	e7cf      	b.n	800407e <_printf_i+0x52>
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6010      	str	r0, [r2, #0]
 80040e6:	0628      	lsls	r0, r5, #24
 80040e8:	d501      	bpl.n	80040ee <_printf_i+0xc2>
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e002      	b.n	80040f4 <_printf_i+0xc8>
 80040ee:	0668      	lsls	r0, r5, #25
 80040f0:	d5fb      	bpl.n	80040ea <_printf_i+0xbe>
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	4854      	ldr	r0, [pc, #336]	; (8004248 <_printf_i+0x21c>)
 80040f6:	296f      	cmp	r1, #111	; 0x6f
 80040f8:	bf14      	ite	ne
 80040fa:	220a      	movne	r2, #10
 80040fc:	2208      	moveq	r2, #8
 80040fe:	2100      	movs	r1, #0
 8004100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004104:	6865      	ldr	r5, [r4, #4]
 8004106:	60a5      	str	r5, [r4, #8]
 8004108:	2d00      	cmp	r5, #0
 800410a:	f2c0 8095 	blt.w	8004238 <_printf_i+0x20c>
 800410e:	6821      	ldr	r1, [r4, #0]
 8004110:	f021 0104 	bic.w	r1, r1, #4
 8004114:	6021      	str	r1, [r4, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13d      	bne.n	8004196 <_printf_i+0x16a>
 800411a:	2d00      	cmp	r5, #0
 800411c:	f040 808e 	bne.w	800423c <_printf_i+0x210>
 8004120:	4665      	mov	r5, ip
 8004122:	2a08      	cmp	r2, #8
 8004124:	d10b      	bne.n	800413e <_printf_i+0x112>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	07db      	lsls	r3, r3, #31
 800412a:	d508      	bpl.n	800413e <_printf_i+0x112>
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	6862      	ldr	r2, [r4, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	bfde      	ittt	le
 8004134:	2330      	movle	r3, #48	; 0x30
 8004136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800413a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800413e:	ebac 0305 	sub.w	r3, ip, r5
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	f8cd 8000 	str.w	r8, [sp]
 8004148:	463b      	mov	r3, r7
 800414a:	aa03      	add	r2, sp, #12
 800414c:	4621      	mov	r1, r4
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff fef6 	bl	8003f40 <_printf_common>
 8004154:	3001      	adds	r0, #1
 8004156:	d14d      	bne.n	80041f4 <_printf_i+0x1c8>
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	b005      	add	sp, #20
 800415e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004162:	4839      	ldr	r0, [pc, #228]	; (8004248 <_printf_i+0x21c>)
 8004164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	1d1d      	adds	r5, r3, #4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6015      	str	r5, [r2, #0]
 8004172:	060a      	lsls	r2, r1, #24
 8004174:	d50b      	bpl.n	800418e <_printf_i+0x162>
 8004176:	07ca      	lsls	r2, r1, #31
 8004178:	bf44      	itt	mi
 800417a:	f041 0120 	orrmi.w	r1, r1, #32
 800417e:	6021      	strmi	r1, [r4, #0]
 8004180:	b91b      	cbnz	r3, 800418a <_printf_i+0x15e>
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	f022 0220 	bic.w	r2, r2, #32
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	e7b7      	b.n	80040fe <_printf_i+0xd2>
 800418e:	064d      	lsls	r5, r1, #25
 8004190:	bf48      	it	mi
 8004192:	b29b      	uxthmi	r3, r3
 8004194:	e7ef      	b.n	8004176 <_printf_i+0x14a>
 8004196:	4665      	mov	r5, ip
 8004198:	fbb3 f1f2 	udiv	r1, r3, r2
 800419c:	fb02 3311 	mls	r3, r2, r1, r3
 80041a0:	5cc3      	ldrb	r3, [r0, r3]
 80041a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80041a6:	460b      	mov	r3, r1
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d1f5      	bne.n	8004198 <_printf_i+0x16c>
 80041ac:	e7b9      	b.n	8004122 <_printf_i+0xf6>
 80041ae:	6813      	ldr	r3, [r2, #0]
 80041b0:	6825      	ldr	r5, [r4, #0]
 80041b2:	6961      	ldr	r1, [r4, #20]
 80041b4:	1d18      	adds	r0, r3, #4
 80041b6:	6010      	str	r0, [r2, #0]
 80041b8:	0628      	lsls	r0, r5, #24
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	d501      	bpl.n	80041c2 <_printf_i+0x196>
 80041be:	6019      	str	r1, [r3, #0]
 80041c0:	e002      	b.n	80041c8 <_printf_i+0x19c>
 80041c2:	066a      	lsls	r2, r5, #25
 80041c4:	d5fb      	bpl.n	80041be <_printf_i+0x192>
 80041c6:	8019      	strh	r1, [r3, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	4665      	mov	r5, ip
 80041ce:	e7b9      	b.n	8004144 <_printf_i+0x118>
 80041d0:	6813      	ldr	r3, [r2, #0]
 80041d2:	1d19      	adds	r1, r3, #4
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	681d      	ldr	r5, [r3, #0]
 80041d8:	6862      	ldr	r2, [r4, #4]
 80041da:	2100      	movs	r1, #0
 80041dc:	4628      	mov	r0, r5
 80041de:	f7fc f81f 	bl	8000220 <memchr>
 80041e2:	b108      	cbz	r0, 80041e8 <_printf_i+0x1bc>
 80041e4:	1b40      	subs	r0, r0, r5
 80041e6:	6060      	str	r0, [r4, #4]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	2300      	movs	r3, #0
 80041ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f2:	e7a7      	b.n	8004144 <_printf_i+0x118>
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	462a      	mov	r2, r5
 80041f8:	4639      	mov	r1, r7
 80041fa:	4630      	mov	r0, r6
 80041fc:	47c0      	blx	r8
 80041fe:	3001      	adds	r0, #1
 8004200:	d0aa      	beq.n	8004158 <_printf_i+0x12c>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	079b      	lsls	r3, r3, #30
 8004206:	d413      	bmi.n	8004230 <_printf_i+0x204>
 8004208:	68e0      	ldr	r0, [r4, #12]
 800420a:	9b03      	ldr	r3, [sp, #12]
 800420c:	4298      	cmp	r0, r3
 800420e:	bfb8      	it	lt
 8004210:	4618      	movlt	r0, r3
 8004212:	e7a3      	b.n	800415c <_printf_i+0x130>
 8004214:	2301      	movs	r3, #1
 8004216:	464a      	mov	r2, r9
 8004218:	4639      	mov	r1, r7
 800421a:	4630      	mov	r0, r6
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d09a      	beq.n	8004158 <_printf_i+0x12c>
 8004222:	3501      	adds	r5, #1
 8004224:	68e3      	ldr	r3, [r4, #12]
 8004226:	9a03      	ldr	r2, [sp, #12]
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	42ab      	cmp	r3, r5
 800422c:	dcf2      	bgt.n	8004214 <_printf_i+0x1e8>
 800422e:	e7eb      	b.n	8004208 <_printf_i+0x1dc>
 8004230:	2500      	movs	r5, #0
 8004232:	f104 0919 	add.w	r9, r4, #25
 8004236:	e7f5      	b.n	8004224 <_printf_i+0x1f8>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ac      	bne.n	8004196 <_printf_i+0x16a>
 800423c:	7803      	ldrb	r3, [r0, #0]
 800423e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004246:	e76c      	b.n	8004122 <_printf_i+0xf6>
 8004248:	08005a56 	.word	0x08005a56
 800424c:	08005a67 	.word	0x08005a67

08004250 <siprintf>:
 8004250:	b40e      	push	{r1, r2, r3}
 8004252:	b500      	push	{lr}
 8004254:	b09c      	sub	sp, #112	; 0x70
 8004256:	ab1d      	add	r3, sp, #116	; 0x74
 8004258:	9002      	str	r0, [sp, #8]
 800425a:	9006      	str	r0, [sp, #24]
 800425c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004260:	4809      	ldr	r0, [pc, #36]	; (8004288 <siprintf+0x38>)
 8004262:	9107      	str	r1, [sp, #28]
 8004264:	9104      	str	r1, [sp, #16]
 8004266:	4909      	ldr	r1, [pc, #36]	; (800428c <siprintf+0x3c>)
 8004268:	f853 2b04 	ldr.w	r2, [r3], #4
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	6800      	ldr	r0, [r0, #0]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	a902      	add	r1, sp, #8
 8004274:	f001 fa5c 	bl	8005730 <_svfiprintf_r>
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	b01c      	add	sp, #112	; 0x70
 8004280:	f85d eb04 	ldr.w	lr, [sp], #4
 8004284:	b003      	add	sp, #12
 8004286:	4770      	bx	lr
 8004288:	2000000c 	.word	0x2000000c
 800428c:	ffff0208 	.word	0xffff0208

08004290 <quorem>:
 8004290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	6903      	ldr	r3, [r0, #16]
 8004296:	690c      	ldr	r4, [r1, #16]
 8004298:	42a3      	cmp	r3, r4
 800429a:	4680      	mov	r8, r0
 800429c:	f2c0 8082 	blt.w	80043a4 <quorem+0x114>
 80042a0:	3c01      	subs	r4, #1
 80042a2:	f101 0714 	add.w	r7, r1, #20
 80042a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80042aa:	f100 0614 	add.w	r6, r0, #20
 80042ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80042b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80042b6:	eb06 030c 	add.w	r3, r6, ip
 80042ba:	3501      	adds	r5, #1
 80042bc:	eb07 090c 	add.w	r9, r7, ip
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80042c6:	b395      	cbz	r5, 800432e <quorem+0x9e>
 80042c8:	f04f 0a00 	mov.w	sl, #0
 80042cc:	4638      	mov	r0, r7
 80042ce:	46b6      	mov	lr, r6
 80042d0:	46d3      	mov	fp, sl
 80042d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80042d6:	b293      	uxth	r3, r2
 80042d8:	fb05 a303 	mla	r3, r5, r3, sl
 80042dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	ebab 0303 	sub.w	r3, fp, r3
 80042e6:	0c12      	lsrs	r2, r2, #16
 80042e8:	f8de b000 	ldr.w	fp, [lr]
 80042ec:	fb05 a202 	mla	r2, r5, r2, sl
 80042f0:	fa13 f38b 	uxtah	r3, r3, fp
 80042f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80042f8:	fa1f fb82 	uxth.w	fp, r2
 80042fc:	f8de 2000 	ldr.w	r2, [lr]
 8004300:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800430e:	4581      	cmp	r9, r0
 8004310:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004314:	f84e 3b04 	str.w	r3, [lr], #4
 8004318:	d2db      	bcs.n	80042d2 <quorem+0x42>
 800431a:	f856 300c 	ldr.w	r3, [r6, ip]
 800431e:	b933      	cbnz	r3, 800432e <quorem+0x9e>
 8004320:	9b01      	ldr	r3, [sp, #4]
 8004322:	3b04      	subs	r3, #4
 8004324:	429e      	cmp	r6, r3
 8004326:	461a      	mov	r2, r3
 8004328:	d330      	bcc.n	800438c <quorem+0xfc>
 800432a:	f8c8 4010 	str.w	r4, [r8, #16]
 800432e:	4640      	mov	r0, r8
 8004330:	f001 f828 	bl	8005384 <__mcmp>
 8004334:	2800      	cmp	r0, #0
 8004336:	db25      	blt.n	8004384 <quorem+0xf4>
 8004338:	3501      	adds	r5, #1
 800433a:	4630      	mov	r0, r6
 800433c:	f04f 0c00 	mov.w	ip, #0
 8004340:	f857 2b04 	ldr.w	r2, [r7], #4
 8004344:	f8d0 e000 	ldr.w	lr, [r0]
 8004348:	b293      	uxth	r3, r2
 800434a:	ebac 0303 	sub.w	r3, ip, r3
 800434e:	0c12      	lsrs	r2, r2, #16
 8004350:	fa13 f38e 	uxtah	r3, r3, lr
 8004354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004362:	45b9      	cmp	r9, r7
 8004364:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004368:	f840 3b04 	str.w	r3, [r0], #4
 800436c:	d2e8      	bcs.n	8004340 <quorem+0xb0>
 800436e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004372:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004376:	b92a      	cbnz	r2, 8004384 <quorem+0xf4>
 8004378:	3b04      	subs	r3, #4
 800437a:	429e      	cmp	r6, r3
 800437c:	461a      	mov	r2, r3
 800437e:	d30b      	bcc.n	8004398 <quorem+0x108>
 8004380:	f8c8 4010 	str.w	r4, [r8, #16]
 8004384:	4628      	mov	r0, r5
 8004386:	b003      	add	sp, #12
 8004388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	3b04      	subs	r3, #4
 8004390:	2a00      	cmp	r2, #0
 8004392:	d1ca      	bne.n	800432a <quorem+0x9a>
 8004394:	3c01      	subs	r4, #1
 8004396:	e7c5      	b.n	8004324 <quorem+0x94>
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	3b04      	subs	r3, #4
 800439c:	2a00      	cmp	r2, #0
 800439e:	d1ef      	bne.n	8004380 <quorem+0xf0>
 80043a0:	3c01      	subs	r4, #1
 80043a2:	e7ea      	b.n	800437a <quorem+0xea>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e7ee      	b.n	8004386 <quorem+0xf6>

080043a8 <_dtoa_r>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	ec57 6b10 	vmov	r6, r7, d0
 80043b0:	b097      	sub	sp, #92	; 0x5c
 80043b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043b4:	9106      	str	r1, [sp, #24]
 80043b6:	4604      	mov	r4, r0
 80043b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80043ba:	9312      	str	r3, [sp, #72]	; 0x48
 80043bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043c0:	e9cd 6700 	strd	r6, r7, [sp]
 80043c4:	b93d      	cbnz	r5, 80043d6 <_dtoa_r+0x2e>
 80043c6:	2010      	movs	r0, #16
 80043c8:	f000 fdb4 	bl	8004f34 <malloc>
 80043cc:	6260      	str	r0, [r4, #36]	; 0x24
 80043ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043d2:	6005      	str	r5, [r0, #0]
 80043d4:	60c5      	str	r5, [r0, #12]
 80043d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	b151      	cbz	r1, 80043f2 <_dtoa_r+0x4a>
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	604a      	str	r2, [r1, #4]
 80043e0:	2301      	movs	r3, #1
 80043e2:	4093      	lsls	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 fdeb 	bl	8004fc2 <_Bfree>
 80043ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	1e3b      	subs	r3, r7, #0
 80043f4:	bfbb      	ittet	lt
 80043f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043fa:	9301      	strlt	r3, [sp, #4]
 80043fc:	2300      	movge	r3, #0
 80043fe:	2201      	movlt	r2, #1
 8004400:	bfac      	ite	ge
 8004402:	f8c8 3000 	strge.w	r3, [r8]
 8004406:	f8c8 2000 	strlt.w	r2, [r8]
 800440a:	4baf      	ldr	r3, [pc, #700]	; (80046c8 <_dtoa_r+0x320>)
 800440c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004410:	ea33 0308 	bics.w	r3, r3, r8
 8004414:	d114      	bne.n	8004440 <_dtoa_r+0x98>
 8004416:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004418:	f242 730f 	movw	r3, #9999	; 0x270f
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	9b00      	ldr	r3, [sp, #0]
 8004420:	b923      	cbnz	r3, 800442c <_dtoa_r+0x84>
 8004422:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004426:	2800      	cmp	r0, #0
 8004428:	f000 8542 	beq.w	8004eb0 <_dtoa_r+0xb08>
 800442c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800442e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80046dc <_dtoa_r+0x334>
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8544 	beq.w	8004ec0 <_dtoa_r+0xb18>
 8004438:	f10b 0303 	add.w	r3, fp, #3
 800443c:	f000 bd3e 	b.w	8004ebc <_dtoa_r+0xb14>
 8004440:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc fb5c 	bl	8000b08 <__aeabi_dcmpeq>
 8004450:	4681      	mov	r9, r0
 8004452:	b168      	cbz	r0, 8004470 <_dtoa_r+0xc8>
 8004454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004456:	2301      	movs	r3, #1
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8524 	beq.w	8004eaa <_dtoa_r+0xb02>
 8004462:	4b9a      	ldr	r3, [pc, #616]	; (80046cc <_dtoa_r+0x324>)
 8004464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004466:	f103 3bff 	add.w	fp, r3, #4294967295
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	f000 bd28 	b.w	8004ec0 <_dtoa_r+0xb18>
 8004470:	aa14      	add	r2, sp, #80	; 0x50
 8004472:	a915      	add	r1, sp, #84	; 0x54
 8004474:	ec47 6b10 	vmov	d0, r6, r7
 8004478:	4620      	mov	r0, r4
 800447a:	f000 fffa 	bl	8005472 <__d2b>
 800447e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004482:	9004      	str	r0, [sp, #16]
 8004484:	2d00      	cmp	r5, #0
 8004486:	d07c      	beq.n	8004582 <_dtoa_r+0x1da>
 8004488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800448c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004490:	46b2      	mov	sl, r6
 8004492:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800449a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800449e:	2200      	movs	r2, #0
 80044a0:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <_dtoa_r+0x328>)
 80044a2:	4650      	mov	r0, sl
 80044a4:	4659      	mov	r1, fp
 80044a6:	f7fb ff0f 	bl	80002c8 <__aeabi_dsub>
 80044aa:	a381      	add	r3, pc, #516	; (adr r3, 80046b0 <_dtoa_r+0x308>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f8c2 	bl	8000638 <__aeabi_dmul>
 80044b4:	a380      	add	r3, pc, #512	; (adr r3, 80046b8 <_dtoa_r+0x310>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f7fb ff07 	bl	80002cc <__adddf3>
 80044be:	4606      	mov	r6, r0
 80044c0:	4628      	mov	r0, r5
 80044c2:	460f      	mov	r7, r1
 80044c4:	f7fc f84e 	bl	8000564 <__aeabi_i2d>
 80044c8:	a37d      	add	r3, pc, #500	; (adr r3, 80046c0 <_dtoa_r+0x318>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fc f8b3 	bl	8000638 <__aeabi_dmul>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4630      	mov	r0, r6
 80044d8:	4639      	mov	r1, r7
 80044da:	f7fb fef7 	bl	80002cc <__adddf3>
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	f7fc fb59 	bl	8000b98 <__aeabi_d2iz>
 80044e6:	2200      	movs	r2, #0
 80044e8:	4682      	mov	sl, r0
 80044ea:	2300      	movs	r3, #0
 80044ec:	4630      	mov	r0, r6
 80044ee:	4639      	mov	r1, r7
 80044f0:	f7fc fb14 	bl	8000b1c <__aeabi_dcmplt>
 80044f4:	b148      	cbz	r0, 800450a <_dtoa_r+0x162>
 80044f6:	4650      	mov	r0, sl
 80044f8:	f7fc f834 	bl	8000564 <__aeabi_i2d>
 80044fc:	4632      	mov	r2, r6
 80044fe:	463b      	mov	r3, r7
 8004500:	f7fc fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8004504:	b908      	cbnz	r0, 800450a <_dtoa_r+0x162>
 8004506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800450a:	f1ba 0f16 	cmp.w	sl, #22
 800450e:	d859      	bhi.n	80045c4 <_dtoa_r+0x21c>
 8004510:	4970      	ldr	r1, [pc, #448]	; (80046d4 <_dtoa_r+0x32c>)
 8004512:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800451a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800451e:	f7fc fb1b 	bl	8000b58 <__aeabi_dcmpgt>
 8004522:	2800      	cmp	r0, #0
 8004524:	d050      	beq.n	80045c8 <_dtoa_r+0x220>
 8004526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800452a:	2300      	movs	r3, #0
 800452c:	930f      	str	r3, [sp, #60]	; 0x3c
 800452e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004530:	1b5d      	subs	r5, r3, r5
 8004532:	f1b5 0801 	subs.w	r8, r5, #1
 8004536:	bf49      	itett	mi
 8004538:	f1c5 0301 	rsbmi	r3, r5, #1
 800453c:	2300      	movpl	r3, #0
 800453e:	9305      	strmi	r3, [sp, #20]
 8004540:	f04f 0800 	movmi.w	r8, #0
 8004544:	bf58      	it	pl
 8004546:	9305      	strpl	r3, [sp, #20]
 8004548:	f1ba 0f00 	cmp.w	sl, #0
 800454c:	db3e      	blt.n	80045cc <_dtoa_r+0x224>
 800454e:	2300      	movs	r3, #0
 8004550:	44d0      	add	r8, sl
 8004552:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	9b06      	ldr	r3, [sp, #24]
 800455a:	2b09      	cmp	r3, #9
 800455c:	f200 8090 	bhi.w	8004680 <_dtoa_r+0x2d8>
 8004560:	2b05      	cmp	r3, #5
 8004562:	bfc4      	itt	gt
 8004564:	3b04      	subgt	r3, #4
 8004566:	9306      	strgt	r3, [sp, #24]
 8004568:	9b06      	ldr	r3, [sp, #24]
 800456a:	f1a3 0302 	sub.w	r3, r3, #2
 800456e:	bfcc      	ite	gt
 8004570:	2500      	movgt	r5, #0
 8004572:	2501      	movle	r5, #1
 8004574:	2b03      	cmp	r3, #3
 8004576:	f200 808f 	bhi.w	8004698 <_dtoa_r+0x2f0>
 800457a:	e8df f003 	tbb	[pc, r3]
 800457e:	7f7d      	.short	0x7f7d
 8004580:	7131      	.short	0x7131
 8004582:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004586:	441d      	add	r5, r3
 8004588:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800458c:	2820      	cmp	r0, #32
 800458e:	dd13      	ble.n	80045b8 <_dtoa_r+0x210>
 8004590:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004594:	9b00      	ldr	r3, [sp, #0]
 8004596:	fa08 f800 	lsl.w	r8, r8, r0
 800459a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800459e:	fa23 f000 	lsr.w	r0, r3, r0
 80045a2:	ea48 0000 	orr.w	r0, r8, r0
 80045a6:	f7fb ffcd 	bl	8000544 <__aeabi_ui2d>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4682      	mov	sl, r0
 80045ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80045b2:	3d01      	subs	r5, #1
 80045b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80045b6:	e772      	b.n	800449e <_dtoa_r+0xf6>
 80045b8:	9b00      	ldr	r3, [sp, #0]
 80045ba:	f1c0 0020 	rsb	r0, r0, #32
 80045be:	fa03 f000 	lsl.w	r0, r3, r0
 80045c2:	e7f0      	b.n	80045a6 <_dtoa_r+0x1fe>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e7b1      	b.n	800452c <_dtoa_r+0x184>
 80045c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80045ca:	e7b0      	b.n	800452e <_dtoa_r+0x186>
 80045cc:	9b05      	ldr	r3, [sp, #20]
 80045ce:	eba3 030a 	sub.w	r3, r3, sl
 80045d2:	9305      	str	r3, [sp, #20]
 80045d4:	f1ca 0300 	rsb	r3, sl, #0
 80045d8:	9307      	str	r3, [sp, #28]
 80045da:	2300      	movs	r3, #0
 80045dc:	930e      	str	r3, [sp, #56]	; 0x38
 80045de:	e7bb      	b.n	8004558 <_dtoa_r+0x1b0>
 80045e0:	2301      	movs	r3, #1
 80045e2:	930a      	str	r3, [sp, #40]	; 0x28
 80045e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dd59      	ble.n	800469e <_dtoa_r+0x2f6>
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	4699      	mov	r9, r3
 80045ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80045f0:	2200      	movs	r2, #0
 80045f2:	6072      	str	r2, [r6, #4]
 80045f4:	2204      	movs	r2, #4
 80045f6:	f102 0014 	add.w	r0, r2, #20
 80045fa:	4298      	cmp	r0, r3
 80045fc:	6871      	ldr	r1, [r6, #4]
 80045fe:	d953      	bls.n	80046a8 <_dtoa_r+0x300>
 8004600:	4620      	mov	r0, r4
 8004602:	f000 fcaa 	bl	8004f5a <_Balloc>
 8004606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004608:	6030      	str	r0, [r6, #0]
 800460a:	f1b9 0f0e 	cmp.w	r9, #14
 800460e:	f8d3 b000 	ldr.w	fp, [r3]
 8004612:	f200 80e6 	bhi.w	80047e2 <_dtoa_r+0x43a>
 8004616:	2d00      	cmp	r5, #0
 8004618:	f000 80e3 	beq.w	80047e2 <_dtoa_r+0x43a>
 800461c:	ed9d 7b00 	vldr	d7, [sp]
 8004620:	f1ba 0f00 	cmp.w	sl, #0
 8004624:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004628:	dd74      	ble.n	8004714 <_dtoa_r+0x36c>
 800462a:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <_dtoa_r+0x32c>)
 800462c:	f00a 030f 	and.w	r3, sl, #15
 8004630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004634:	ed93 7b00 	vldr	d7, [r3]
 8004638:	ea4f 162a 	mov.w	r6, sl, asr #4
 800463c:	06f0      	lsls	r0, r6, #27
 800463e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004642:	d565      	bpl.n	8004710 <_dtoa_r+0x368>
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <_dtoa_r+0x330>)
 8004646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800464a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800464e:	f7fc f91d 	bl	800088c <__aeabi_ddiv>
 8004652:	e9cd 0100 	strd	r0, r1, [sp]
 8004656:	f006 060f 	and.w	r6, r6, #15
 800465a:	2503      	movs	r5, #3
 800465c:	4f1e      	ldr	r7, [pc, #120]	; (80046d8 <_dtoa_r+0x330>)
 800465e:	e04c      	b.n	80046fa <_dtoa_r+0x352>
 8004660:	2301      	movs	r3, #1
 8004662:	930a      	str	r3, [sp, #40]	; 0x28
 8004664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004666:	4453      	add	r3, sl
 8004668:	f103 0901 	add.w	r9, r3, #1
 800466c:	9302      	str	r3, [sp, #8]
 800466e:	464b      	mov	r3, r9
 8004670:	2b01      	cmp	r3, #1
 8004672:	bfb8      	it	lt
 8004674:	2301      	movlt	r3, #1
 8004676:	e7ba      	b.n	80045ee <_dtoa_r+0x246>
 8004678:	2300      	movs	r3, #0
 800467a:	e7b2      	b.n	80045e2 <_dtoa_r+0x23a>
 800467c:	2300      	movs	r3, #0
 800467e:	e7f0      	b.n	8004662 <_dtoa_r+0x2ba>
 8004680:	2501      	movs	r5, #1
 8004682:	2300      	movs	r3, #0
 8004684:	9306      	str	r3, [sp, #24]
 8004686:	950a      	str	r5, [sp, #40]	; 0x28
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	4699      	mov	r9, r3
 8004690:	2200      	movs	r2, #0
 8004692:	2312      	movs	r3, #18
 8004694:	920b      	str	r2, [sp, #44]	; 0x2c
 8004696:	e7aa      	b.n	80045ee <_dtoa_r+0x246>
 8004698:	2301      	movs	r3, #1
 800469a:	930a      	str	r3, [sp, #40]	; 0x28
 800469c:	e7f4      	b.n	8004688 <_dtoa_r+0x2e0>
 800469e:	2301      	movs	r3, #1
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	4699      	mov	r9, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	e7f5      	b.n	8004694 <_dtoa_r+0x2ec>
 80046a8:	3101      	adds	r1, #1
 80046aa:	6071      	str	r1, [r6, #4]
 80046ac:	0052      	lsls	r2, r2, #1
 80046ae:	e7a2      	b.n	80045f6 <_dtoa_r+0x24e>
 80046b0:	636f4361 	.word	0x636f4361
 80046b4:	3fd287a7 	.word	0x3fd287a7
 80046b8:	8b60c8b3 	.word	0x8b60c8b3
 80046bc:	3fc68a28 	.word	0x3fc68a28
 80046c0:	509f79fb 	.word	0x509f79fb
 80046c4:	3fd34413 	.word	0x3fd34413
 80046c8:	7ff00000 	.word	0x7ff00000
 80046cc:	08005a55 	.word	0x08005a55
 80046d0:	3ff80000 	.word	0x3ff80000
 80046d4:	08005ab0 	.word	0x08005ab0
 80046d8:	08005a88 	.word	0x08005a88
 80046dc:	08005a81 	.word	0x08005a81
 80046e0:	07f1      	lsls	r1, r6, #31
 80046e2:	d508      	bpl.n	80046f6 <_dtoa_r+0x34e>
 80046e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	f7fb ffa4 	bl	8000638 <__aeabi_dmul>
 80046f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80046f4:	3501      	adds	r5, #1
 80046f6:	1076      	asrs	r6, r6, #1
 80046f8:	3708      	adds	r7, #8
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	d1f0      	bne.n	80046e0 <_dtoa_r+0x338>
 80046fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004706:	f7fc f8c1 	bl	800088c <__aeabi_ddiv>
 800470a:	e9cd 0100 	strd	r0, r1, [sp]
 800470e:	e01a      	b.n	8004746 <_dtoa_r+0x39e>
 8004710:	2502      	movs	r5, #2
 8004712:	e7a3      	b.n	800465c <_dtoa_r+0x2b4>
 8004714:	f000 80a0 	beq.w	8004858 <_dtoa_r+0x4b0>
 8004718:	f1ca 0600 	rsb	r6, sl, #0
 800471c:	4b9f      	ldr	r3, [pc, #636]	; (800499c <_dtoa_r+0x5f4>)
 800471e:	4fa0      	ldr	r7, [pc, #640]	; (80049a0 <_dtoa_r+0x5f8>)
 8004720:	f006 020f 	and.w	r2, r6, #15
 8004724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004730:	f7fb ff82 	bl	8000638 <__aeabi_dmul>
 8004734:	e9cd 0100 	strd	r0, r1, [sp]
 8004738:	1136      	asrs	r6, r6, #4
 800473a:	2300      	movs	r3, #0
 800473c:	2502      	movs	r5, #2
 800473e:	2e00      	cmp	r6, #0
 8004740:	d17f      	bne.n	8004842 <_dtoa_r+0x49a>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e1      	bne.n	800470a <_dtoa_r+0x362>
 8004746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8087 	beq.w	800485c <_dtoa_r+0x4b4>
 800474e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004752:	2200      	movs	r2, #0
 8004754:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <_dtoa_r+0x5fc>)
 8004756:	4630      	mov	r0, r6
 8004758:	4639      	mov	r1, r7
 800475a:	f7fc f9df 	bl	8000b1c <__aeabi_dcmplt>
 800475e:	2800      	cmp	r0, #0
 8004760:	d07c      	beq.n	800485c <_dtoa_r+0x4b4>
 8004762:	f1b9 0f00 	cmp.w	r9, #0
 8004766:	d079      	beq.n	800485c <_dtoa_r+0x4b4>
 8004768:	9b02      	ldr	r3, [sp, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dd35      	ble.n	80047da <_dtoa_r+0x432>
 800476e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004772:	9308      	str	r3, [sp, #32]
 8004774:	4639      	mov	r1, r7
 8004776:	2200      	movs	r2, #0
 8004778:	4b8b      	ldr	r3, [pc, #556]	; (80049a8 <_dtoa_r+0x600>)
 800477a:	4630      	mov	r0, r6
 800477c:	f7fb ff5c 	bl	8000638 <__aeabi_dmul>
 8004780:	e9cd 0100 	strd	r0, r1, [sp]
 8004784:	9f02      	ldr	r7, [sp, #8]
 8004786:	3501      	adds	r5, #1
 8004788:	4628      	mov	r0, r5
 800478a:	f7fb feeb 	bl	8000564 <__aeabi_i2d>
 800478e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004792:	f7fb ff51 	bl	8000638 <__aeabi_dmul>
 8004796:	2200      	movs	r2, #0
 8004798:	4b84      	ldr	r3, [pc, #528]	; (80049ac <_dtoa_r+0x604>)
 800479a:	f7fb fd97 	bl	80002cc <__adddf3>
 800479e:	4605      	mov	r5, r0
 80047a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	d15d      	bne.n	8004864 <_dtoa_r+0x4bc>
 80047a8:	2200      	movs	r2, #0
 80047aa:	4b81      	ldr	r3, [pc, #516]	; (80049b0 <_dtoa_r+0x608>)
 80047ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b0:	f7fb fd8a 	bl	80002c8 <__aeabi_dsub>
 80047b4:	462a      	mov	r2, r5
 80047b6:	4633      	mov	r3, r6
 80047b8:	e9cd 0100 	strd	r0, r1, [sp]
 80047bc:	f7fc f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	f040 8288 	bne.w	8004cd6 <_dtoa_r+0x92e>
 80047c6:	462a      	mov	r2, r5
 80047c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80047cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047d0:	f7fc f9a4 	bl	8000b1c <__aeabi_dcmplt>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f040 827c 	bne.w	8004cd2 <_dtoa_r+0x92a>
 80047da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047de:	e9cd 2300 	strd	r2, r3, [sp]
 80047e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f2c0 8150 	blt.w	8004a8a <_dtoa_r+0x6e2>
 80047ea:	f1ba 0f0e 	cmp.w	sl, #14
 80047ee:	f300 814c 	bgt.w	8004a8a <_dtoa_r+0x6e2>
 80047f2:	4b6a      	ldr	r3, [pc, #424]	; (800499c <_dtoa_r+0x5f4>)
 80047f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047f8:	ed93 7b00 	vldr	d7, [r3]
 80047fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004804:	f280 80d8 	bge.w	80049b8 <_dtoa_r+0x610>
 8004808:	f1b9 0f00 	cmp.w	r9, #0
 800480c:	f300 80d4 	bgt.w	80049b8 <_dtoa_r+0x610>
 8004810:	f040 825e 	bne.w	8004cd0 <_dtoa_r+0x928>
 8004814:	2200      	movs	r2, #0
 8004816:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <_dtoa_r+0x608>)
 8004818:	ec51 0b17 	vmov	r0, r1, d7
 800481c:	f7fb ff0c 	bl	8000638 <__aeabi_dmul>
 8004820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004824:	f7fc f98e 	bl	8000b44 <__aeabi_dcmpge>
 8004828:	464f      	mov	r7, r9
 800482a:	464e      	mov	r6, r9
 800482c:	2800      	cmp	r0, #0
 800482e:	f040 8234 	bne.w	8004c9a <_dtoa_r+0x8f2>
 8004832:	2331      	movs	r3, #49	; 0x31
 8004834:	f10b 0501 	add.w	r5, fp, #1
 8004838:	f88b 3000 	strb.w	r3, [fp]
 800483c:	f10a 0a01 	add.w	sl, sl, #1
 8004840:	e22f      	b.n	8004ca2 <_dtoa_r+0x8fa>
 8004842:	07f2      	lsls	r2, r6, #31
 8004844:	d505      	bpl.n	8004852 <_dtoa_r+0x4aa>
 8004846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800484a:	f7fb fef5 	bl	8000638 <__aeabi_dmul>
 800484e:	3501      	adds	r5, #1
 8004850:	2301      	movs	r3, #1
 8004852:	1076      	asrs	r6, r6, #1
 8004854:	3708      	adds	r7, #8
 8004856:	e772      	b.n	800473e <_dtoa_r+0x396>
 8004858:	2502      	movs	r5, #2
 800485a:	e774      	b.n	8004746 <_dtoa_r+0x39e>
 800485c:	f8cd a020 	str.w	sl, [sp, #32]
 8004860:	464f      	mov	r7, r9
 8004862:	e791      	b.n	8004788 <_dtoa_r+0x3e0>
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <_dtoa_r+0x5f4>)
 8004866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800486a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800486e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d047      	beq.n	8004904 <_dtoa_r+0x55c>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	2000      	movs	r0, #0
 800487a:	494e      	ldr	r1, [pc, #312]	; (80049b4 <_dtoa_r+0x60c>)
 800487c:	f7fc f806 	bl	800088c <__aeabi_ddiv>
 8004880:	462a      	mov	r2, r5
 8004882:	4633      	mov	r3, r6
 8004884:	f7fb fd20 	bl	80002c8 <__aeabi_dsub>
 8004888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800488c:	465d      	mov	r5, fp
 800488e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004892:	f7fc f981 	bl	8000b98 <__aeabi_d2iz>
 8004896:	4606      	mov	r6, r0
 8004898:	f7fb fe64 	bl	8000564 <__aeabi_i2d>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048a4:	f7fb fd10 	bl	80002c8 <__aeabi_dsub>
 80048a8:	3630      	adds	r6, #48	; 0x30
 80048aa:	f805 6b01 	strb.w	r6, [r5], #1
 80048ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048b2:	e9cd 0100 	strd	r0, r1, [sp]
 80048b6:	f7fc f931 	bl	8000b1c <__aeabi_dcmplt>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d163      	bne.n	8004986 <_dtoa_r+0x5de>
 80048be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048c2:	2000      	movs	r0, #0
 80048c4:	4937      	ldr	r1, [pc, #220]	; (80049a4 <_dtoa_r+0x5fc>)
 80048c6:	f7fb fcff 	bl	80002c8 <__aeabi_dsub>
 80048ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ce:	f7fc f925 	bl	8000b1c <__aeabi_dcmplt>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f040 80b7 	bne.w	8004a46 <_dtoa_r+0x69e>
 80048d8:	eba5 030b 	sub.w	r3, r5, fp
 80048dc:	429f      	cmp	r7, r3
 80048de:	f77f af7c 	ble.w	80047da <_dtoa_r+0x432>
 80048e2:	2200      	movs	r2, #0
 80048e4:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <_dtoa_r+0x600>)
 80048e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048ea:	f7fb fea5 	bl	8000638 <__aeabi_dmul>
 80048ee:	2200      	movs	r2, #0
 80048f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <_dtoa_r+0x600>)
 80048f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048fa:	f7fb fe9d 	bl	8000638 <__aeabi_dmul>
 80048fe:	e9cd 0100 	strd	r0, r1, [sp]
 8004902:	e7c4      	b.n	800488e <_dtoa_r+0x4e6>
 8004904:	462a      	mov	r2, r5
 8004906:	4633      	mov	r3, r6
 8004908:	f7fb fe96 	bl	8000638 <__aeabi_dmul>
 800490c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004910:	eb0b 0507 	add.w	r5, fp, r7
 8004914:	465e      	mov	r6, fp
 8004916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800491a:	f7fc f93d 	bl	8000b98 <__aeabi_d2iz>
 800491e:	4607      	mov	r7, r0
 8004920:	f7fb fe20 	bl	8000564 <__aeabi_i2d>
 8004924:	3730      	adds	r7, #48	; 0x30
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800492e:	f7fb fccb 	bl	80002c8 <__aeabi_dsub>
 8004932:	f806 7b01 	strb.w	r7, [r6], #1
 8004936:	42ae      	cmp	r6, r5
 8004938:	e9cd 0100 	strd	r0, r1, [sp]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	d126      	bne.n	8004990 <_dtoa_r+0x5e8>
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <_dtoa_r+0x60c>)
 8004944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004948:	f7fb fcc0 	bl	80002cc <__adddf3>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004954:	f7fc f900 	bl	8000b58 <__aeabi_dcmpgt>
 8004958:	2800      	cmp	r0, #0
 800495a:	d174      	bne.n	8004a46 <_dtoa_r+0x69e>
 800495c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004960:	2000      	movs	r0, #0
 8004962:	4914      	ldr	r1, [pc, #80]	; (80049b4 <_dtoa_r+0x60c>)
 8004964:	f7fb fcb0 	bl	80002c8 <__aeabi_dsub>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004970:	f7fc f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8004974:	2800      	cmp	r0, #0
 8004976:	f43f af30 	beq.w	80047da <_dtoa_r+0x432>
 800497a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800497e:	2b30      	cmp	r3, #48	; 0x30
 8004980:	f105 32ff 	add.w	r2, r5, #4294967295
 8004984:	d002      	beq.n	800498c <_dtoa_r+0x5e4>
 8004986:	f8dd a020 	ldr.w	sl, [sp, #32]
 800498a:	e04a      	b.n	8004a22 <_dtoa_r+0x67a>
 800498c:	4615      	mov	r5, r2
 800498e:	e7f4      	b.n	800497a <_dtoa_r+0x5d2>
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <_dtoa_r+0x600>)
 8004992:	f7fb fe51 	bl	8000638 <__aeabi_dmul>
 8004996:	e9cd 0100 	strd	r0, r1, [sp]
 800499a:	e7bc      	b.n	8004916 <_dtoa_r+0x56e>
 800499c:	08005ab0 	.word	0x08005ab0
 80049a0:	08005a88 	.word	0x08005a88
 80049a4:	3ff00000 	.word	0x3ff00000
 80049a8:	40240000 	.word	0x40240000
 80049ac:	401c0000 	.word	0x401c0000
 80049b0:	40140000 	.word	0x40140000
 80049b4:	3fe00000 	.word	0x3fe00000
 80049b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80049bc:	465d      	mov	r5, fp
 80049be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049c2:	4630      	mov	r0, r6
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7fb ff61 	bl	800088c <__aeabi_ddiv>
 80049ca:	f7fc f8e5 	bl	8000b98 <__aeabi_d2iz>
 80049ce:	4680      	mov	r8, r0
 80049d0:	f7fb fdc8 	bl	8000564 <__aeabi_i2d>
 80049d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049d8:	f7fb fe2e 	bl	8000638 <__aeabi_dmul>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4630      	mov	r0, r6
 80049e2:	4639      	mov	r1, r7
 80049e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80049e8:	f7fb fc6e 	bl	80002c8 <__aeabi_dsub>
 80049ec:	f805 6b01 	strb.w	r6, [r5], #1
 80049f0:	eba5 060b 	sub.w	r6, r5, fp
 80049f4:	45b1      	cmp	r9, r6
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	d139      	bne.n	8004a70 <_dtoa_r+0x6c8>
 80049fc:	f7fb fc66 	bl	80002cc <__adddf3>
 8004a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a04:	4606      	mov	r6, r0
 8004a06:	460f      	mov	r7, r1
 8004a08:	f7fc f8a6 	bl	8000b58 <__aeabi_dcmpgt>
 8004a0c:	b9c8      	cbnz	r0, 8004a42 <_dtoa_r+0x69a>
 8004a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a12:	4630      	mov	r0, r6
 8004a14:	4639      	mov	r1, r7
 8004a16:	f7fc f877 	bl	8000b08 <__aeabi_dcmpeq>
 8004a1a:	b110      	cbz	r0, 8004a22 <_dtoa_r+0x67a>
 8004a1c:	f018 0f01 	tst.w	r8, #1
 8004a20:	d10f      	bne.n	8004a42 <_dtoa_r+0x69a>
 8004a22:	9904      	ldr	r1, [sp, #16]
 8004a24:	4620      	mov	r0, r4
 8004a26:	f000 facc 	bl	8004fc2 <_Bfree>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a2e:	702b      	strb	r3, [r5, #0]
 8004a30:	f10a 0301 	add.w	r3, sl, #1
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8241 	beq.w	8004ec0 <_dtoa_r+0xb18>
 8004a3e:	601d      	str	r5, [r3, #0]
 8004a40:	e23e      	b.n	8004ec0 <_dtoa_r+0xb18>
 8004a42:	f8cd a020 	str.w	sl, [sp, #32]
 8004a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a4a:	2a39      	cmp	r2, #57	; 0x39
 8004a4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004a50:	d108      	bne.n	8004a64 <_dtoa_r+0x6bc>
 8004a52:	459b      	cmp	fp, r3
 8004a54:	d10a      	bne.n	8004a6c <_dtoa_r+0x6c4>
 8004a56:	9b08      	ldr	r3, [sp, #32]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	9308      	str	r3, [sp, #32]
 8004a5c:	2330      	movs	r3, #48	; 0x30
 8004a5e:	f88b 3000 	strb.w	r3, [fp]
 8004a62:	465b      	mov	r3, fp
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	3201      	adds	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e78c      	b.n	8004986 <_dtoa_r+0x5de>
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	e7ea      	b.n	8004a46 <_dtoa_r+0x69e>
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b9b      	ldr	r3, [pc, #620]	; (8004ce0 <_dtoa_r+0x938>)
 8004a74:	f7fb fde0 	bl	8000638 <__aeabi_dmul>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	f7fc f842 	bl	8000b08 <__aeabi_dcmpeq>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d09a      	beq.n	80049be <_dtoa_r+0x616>
 8004a88:	e7cb      	b.n	8004a22 <_dtoa_r+0x67a>
 8004a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	f000 808b 	beq.w	8004ba8 <_dtoa_r+0x800>
 8004a92:	9a06      	ldr	r2, [sp, #24]
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	dc6e      	bgt.n	8004b76 <_dtoa_r+0x7ce>
 8004a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d067      	beq.n	8004b6e <_dtoa_r+0x7c6>
 8004a9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004aa2:	9f07      	ldr	r7, [sp, #28]
 8004aa4:	9d05      	ldr	r5, [sp, #20]
 8004aa6:	9a05      	ldr	r2, [sp, #20]
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	441a      	add	r2, r3
 8004aac:	4620      	mov	r0, r4
 8004aae:	9205      	str	r2, [sp, #20]
 8004ab0:	4498      	add	r8, r3
 8004ab2:	f000 fb26 	bl	8005102 <__i2b>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	dd0c      	ble.n	8004ad6 <_dtoa_r+0x72e>
 8004abc:	f1b8 0f00 	cmp.w	r8, #0
 8004ac0:	dd09      	ble.n	8004ad6 <_dtoa_r+0x72e>
 8004ac2:	4545      	cmp	r5, r8
 8004ac4:	9a05      	ldr	r2, [sp, #20]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	bfa8      	it	ge
 8004aca:	4643      	movge	r3, r8
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	9205      	str	r2, [sp, #20]
 8004ad0:	1aed      	subs	r5, r5, r3
 8004ad2:	eba8 0803 	sub.w	r8, r8, r3
 8004ad6:	9b07      	ldr	r3, [sp, #28]
 8004ad8:	b1eb      	cbz	r3, 8004b16 <_dtoa_r+0x76e>
 8004ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d067      	beq.n	8004bb0 <_dtoa_r+0x808>
 8004ae0:	b18f      	cbz	r7, 8004b06 <_dtoa_r+0x75e>
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	463a      	mov	r2, r7
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 fbaa 	bl	8005240 <__pow5mult>
 8004aec:	9a04      	ldr	r2, [sp, #16]
 8004aee:	4601      	mov	r1, r0
 8004af0:	4606      	mov	r6, r0
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 fb0e 	bl	8005114 <__multiply>
 8004af8:	9904      	ldr	r1, [sp, #16]
 8004afa:	9008      	str	r0, [sp, #32]
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fa60 	bl	8004fc2 <_Bfree>
 8004b02:	9b08      	ldr	r3, [sp, #32]
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	9b07      	ldr	r3, [sp, #28]
 8004b08:	1bda      	subs	r2, r3, r7
 8004b0a:	d004      	beq.n	8004b16 <_dtoa_r+0x76e>
 8004b0c:	9904      	ldr	r1, [sp, #16]
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 fb96 	bl	8005240 <__pow5mult>
 8004b14:	9004      	str	r0, [sp, #16]
 8004b16:	2101      	movs	r1, #1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 faf2 	bl	8005102 <__i2b>
 8004b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b20:	4607      	mov	r7, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 81d0 	beq.w	8004ec8 <_dtoa_r+0xb20>
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 fb87 	bl	8005240 <__pow5mult>
 8004b32:	9b06      	ldr	r3, [sp, #24]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	4607      	mov	r7, r0
 8004b38:	dc40      	bgt.n	8004bbc <_dtoa_r+0x814>
 8004b3a:	9b00      	ldr	r3, [sp, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d139      	bne.n	8004bb4 <_dtoa_r+0x80c>
 8004b40:	9b01      	ldr	r3, [sp, #4]
 8004b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d136      	bne.n	8004bb8 <_dtoa_r+0x810>
 8004b4a:	9b01      	ldr	r3, [sp, #4]
 8004b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	0d1b      	lsrs	r3, r3, #20
 8004b52:	051b      	lsls	r3, r3, #20
 8004b54:	b12b      	cbz	r3, 8004b62 <_dtoa_r+0x7ba>
 8004b56:	9b05      	ldr	r3, [sp, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	9305      	str	r3, [sp, #20]
 8004b5c:	f108 0801 	add.w	r8, r8, #1
 8004b60:	2301      	movs	r3, #1
 8004b62:	9307      	str	r3, [sp, #28]
 8004b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d12a      	bne.n	8004bc0 <_dtoa_r+0x818>
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	e030      	b.n	8004bd0 <_dtoa_r+0x828>
 8004b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b74:	e795      	b.n	8004aa2 <_dtoa_r+0x6fa>
 8004b76:	9b07      	ldr	r3, [sp, #28]
 8004b78:	f109 37ff 	add.w	r7, r9, #4294967295
 8004b7c:	42bb      	cmp	r3, r7
 8004b7e:	bfbf      	itttt	lt
 8004b80:	9b07      	ldrlt	r3, [sp, #28]
 8004b82:	9707      	strlt	r7, [sp, #28]
 8004b84:	1afa      	sublt	r2, r7, r3
 8004b86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004b88:	bfbb      	ittet	lt
 8004b8a:	189b      	addlt	r3, r3, r2
 8004b8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b8e:	1bdf      	subge	r7, r3, r7
 8004b90:	2700      	movlt	r7, #0
 8004b92:	f1b9 0f00 	cmp.w	r9, #0
 8004b96:	bfb5      	itete	lt
 8004b98:	9b05      	ldrlt	r3, [sp, #20]
 8004b9a:	9d05      	ldrge	r5, [sp, #20]
 8004b9c:	eba3 0509 	sublt.w	r5, r3, r9
 8004ba0:	464b      	movge	r3, r9
 8004ba2:	bfb8      	it	lt
 8004ba4:	2300      	movlt	r3, #0
 8004ba6:	e77e      	b.n	8004aa6 <_dtoa_r+0x6fe>
 8004ba8:	9f07      	ldr	r7, [sp, #28]
 8004baa:	9d05      	ldr	r5, [sp, #20]
 8004bac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004bae:	e783      	b.n	8004ab8 <_dtoa_r+0x710>
 8004bb0:	9a07      	ldr	r2, [sp, #28]
 8004bb2:	e7ab      	b.n	8004b0c <_dtoa_r+0x764>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e7d4      	b.n	8004b62 <_dtoa_r+0x7ba>
 8004bb8:	9b00      	ldr	r3, [sp, #0]
 8004bba:	e7d2      	b.n	8004b62 <_dtoa_r+0x7ba>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9307      	str	r3, [sp, #28]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004bc6:	6918      	ldr	r0, [r3, #16]
 8004bc8:	f000 fa4d 	bl	8005066 <__hi0bits>
 8004bcc:	f1c0 0020 	rsb	r0, r0, #32
 8004bd0:	4440      	add	r0, r8
 8004bd2:	f010 001f 	ands.w	r0, r0, #31
 8004bd6:	d047      	beq.n	8004c68 <_dtoa_r+0x8c0>
 8004bd8:	f1c0 0320 	rsb	r3, r0, #32
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	dd3b      	ble.n	8004c58 <_dtoa_r+0x8b0>
 8004be0:	9b05      	ldr	r3, [sp, #20]
 8004be2:	f1c0 001c 	rsb	r0, r0, #28
 8004be6:	4403      	add	r3, r0
 8004be8:	9305      	str	r3, [sp, #20]
 8004bea:	4405      	add	r5, r0
 8004bec:	4480      	add	r8, r0
 8004bee:	9b05      	ldr	r3, [sp, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	dd05      	ble.n	8004c00 <_dtoa_r+0x858>
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	9904      	ldr	r1, [sp, #16]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fb6f 	bl	80052dc <__lshift>
 8004bfe:	9004      	str	r0, [sp, #16]
 8004c00:	f1b8 0f00 	cmp.w	r8, #0
 8004c04:	dd05      	ble.n	8004c12 <_dtoa_r+0x86a>
 8004c06:	4639      	mov	r1, r7
 8004c08:	4642      	mov	r2, r8
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 fb66 	bl	80052dc <__lshift>
 8004c10:	4607      	mov	r7, r0
 8004c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c14:	b353      	cbz	r3, 8004c6c <_dtoa_r+0x8c4>
 8004c16:	4639      	mov	r1, r7
 8004c18:	9804      	ldr	r0, [sp, #16]
 8004c1a:	f000 fbb3 	bl	8005384 <__mcmp>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	da24      	bge.n	8004c6c <_dtoa_r+0x8c4>
 8004c22:	2300      	movs	r3, #0
 8004c24:	220a      	movs	r2, #10
 8004c26:	9904      	ldr	r1, [sp, #16]
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f9e1 	bl	8004ff0 <__multadd>
 8004c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c30:	9004      	str	r0, [sp, #16]
 8004c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 814d 	beq.w	8004ed6 <_dtoa_r+0xb2e>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4631      	mov	r1, r6
 8004c40:	220a      	movs	r2, #10
 8004c42:	4620      	mov	r0, r4
 8004c44:	f000 f9d4 	bl	8004ff0 <__multadd>
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	dc4f      	bgt.n	8004cf0 <_dtoa_r+0x948>
 8004c50:	9b06      	ldr	r3, [sp, #24]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	dd4c      	ble.n	8004cf0 <_dtoa_r+0x948>
 8004c56:	e011      	b.n	8004c7c <_dtoa_r+0x8d4>
 8004c58:	d0c9      	beq.n	8004bee <_dtoa_r+0x846>
 8004c5a:	9a05      	ldr	r2, [sp, #20]
 8004c5c:	331c      	adds	r3, #28
 8004c5e:	441a      	add	r2, r3
 8004c60:	9205      	str	r2, [sp, #20]
 8004c62:	441d      	add	r5, r3
 8004c64:	4498      	add	r8, r3
 8004c66:	e7c2      	b.n	8004bee <_dtoa_r+0x846>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	e7f6      	b.n	8004c5a <_dtoa_r+0x8b2>
 8004c6c:	f1b9 0f00 	cmp.w	r9, #0
 8004c70:	dc38      	bgt.n	8004ce4 <_dtoa_r+0x93c>
 8004c72:	9b06      	ldr	r3, [sp, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	dd35      	ble.n	8004ce4 <_dtoa_r+0x93c>
 8004c78:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c7c:	9b02      	ldr	r3, [sp, #8]
 8004c7e:	b963      	cbnz	r3, 8004c9a <_dtoa_r+0x8f2>
 8004c80:	4639      	mov	r1, r7
 8004c82:	2205      	movs	r2, #5
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 f9b3 	bl	8004ff0 <__multadd>
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	9804      	ldr	r0, [sp, #16]
 8004c90:	f000 fb78 	bl	8005384 <__mcmp>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f73f adcc 	bgt.w	8004832 <_dtoa_r+0x48a>
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	465d      	mov	r5, fp
 8004c9e:	ea6f 0a03 	mvn.w	sl, r3
 8004ca2:	f04f 0900 	mov.w	r9, #0
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f98a 	bl	8004fc2 <_Bfree>
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	f43f aeb7 	beq.w	8004a22 <_dtoa_r+0x67a>
 8004cb4:	f1b9 0f00 	cmp.w	r9, #0
 8004cb8:	d005      	beq.n	8004cc6 <_dtoa_r+0x91e>
 8004cba:	45b1      	cmp	r9, r6
 8004cbc:	d003      	beq.n	8004cc6 <_dtoa_r+0x91e>
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 f97e 	bl	8004fc2 <_Bfree>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 f97a 	bl	8004fc2 <_Bfree>
 8004cce:	e6a8      	b.n	8004a22 <_dtoa_r+0x67a>
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	463e      	mov	r6, r7
 8004cd4:	e7e1      	b.n	8004c9a <_dtoa_r+0x8f2>
 8004cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004cda:	463e      	mov	r6, r7
 8004cdc:	e5a9      	b.n	8004832 <_dtoa_r+0x48a>
 8004cde:	bf00      	nop
 8004ce0:	40240000 	.word	0x40240000
 8004ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80fa 	beq.w	8004ee4 <_dtoa_r+0xb3c>
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	dd05      	ble.n	8004d00 <_dtoa_r+0x958>
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 faef 	bl	80052dc <__lshift>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	9b07      	ldr	r3, [sp, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04c      	beq.n	8004da0 <_dtoa_r+0x9f8>
 8004d06:	6871      	ldr	r1, [r6, #4]
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 f926 	bl	8004f5a <_Balloc>
 8004d0e:	6932      	ldr	r2, [r6, #16]
 8004d10:	3202      	adds	r2, #2
 8004d12:	4605      	mov	r5, r0
 8004d14:	0092      	lsls	r2, r2, #2
 8004d16:	f106 010c 	add.w	r1, r6, #12
 8004d1a:	300c      	adds	r0, #12
 8004d1c:	f000 f912 	bl	8004f44 <memcpy>
 8004d20:	2201      	movs	r2, #1
 8004d22:	4629      	mov	r1, r5
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 fad9 	bl	80052dc <__lshift>
 8004d2a:	9b00      	ldr	r3, [sp, #0]
 8004d2c:	f8cd b014 	str.w	fp, [sp, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	46b1      	mov	r9, r6
 8004d36:	9307      	str	r3, [sp, #28]
 8004d38:	4606      	mov	r6, r0
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	9804      	ldr	r0, [sp, #16]
 8004d3e:	f7ff faa7 	bl	8004290 <quorem>
 8004d42:	4649      	mov	r1, r9
 8004d44:	4605      	mov	r5, r0
 8004d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004d4a:	9804      	ldr	r0, [sp, #16]
 8004d4c:	f000 fb1a 	bl	8005384 <__mcmp>
 8004d50:	4632      	mov	r2, r6
 8004d52:	9000      	str	r0, [sp, #0]
 8004d54:	4639      	mov	r1, r7
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 fb2e 	bl	80053b8 <__mdiff>
 8004d5c:	68c3      	ldr	r3, [r0, #12]
 8004d5e:	4602      	mov	r2, r0
 8004d60:	bb03      	cbnz	r3, 8004da4 <_dtoa_r+0x9fc>
 8004d62:	4601      	mov	r1, r0
 8004d64:	9008      	str	r0, [sp, #32]
 8004d66:	9804      	ldr	r0, [sp, #16]
 8004d68:	f000 fb0c 	bl	8005384 <__mcmp>
 8004d6c:	9a08      	ldr	r2, [sp, #32]
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4611      	mov	r1, r2
 8004d72:	4620      	mov	r0, r4
 8004d74:	9308      	str	r3, [sp, #32]
 8004d76:	f000 f924 	bl	8004fc2 <_Bfree>
 8004d7a:	9b08      	ldr	r3, [sp, #32]
 8004d7c:	b9a3      	cbnz	r3, 8004da8 <_dtoa_r+0xa00>
 8004d7e:	9a06      	ldr	r2, [sp, #24]
 8004d80:	b992      	cbnz	r2, 8004da8 <_dtoa_r+0xa00>
 8004d82:	9a07      	ldr	r2, [sp, #28]
 8004d84:	b982      	cbnz	r2, 8004da8 <_dtoa_r+0xa00>
 8004d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d8a:	d029      	beq.n	8004de0 <_dtoa_r+0xa38>
 8004d8c:	9b00      	ldr	r3, [sp, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dd01      	ble.n	8004d96 <_dtoa_r+0x9ee>
 8004d92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004d96:	9b05      	ldr	r3, [sp, #20]
 8004d98:	1c5d      	adds	r5, r3, #1
 8004d9a:	f883 8000 	strb.w	r8, [r3]
 8004d9e:	e782      	b.n	8004ca6 <_dtoa_r+0x8fe>
 8004da0:	4630      	mov	r0, r6
 8004da2:	e7c2      	b.n	8004d2a <_dtoa_r+0x982>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7e3      	b.n	8004d70 <_dtoa_r+0x9c8>
 8004da8:	9a00      	ldr	r2, [sp, #0]
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	db04      	blt.n	8004db8 <_dtoa_r+0xa10>
 8004dae:	d125      	bne.n	8004dfc <_dtoa_r+0xa54>
 8004db0:	9a06      	ldr	r2, [sp, #24]
 8004db2:	bb1a      	cbnz	r2, 8004dfc <_dtoa_r+0xa54>
 8004db4:	9a07      	ldr	r2, [sp, #28]
 8004db6:	bb0a      	cbnz	r2, 8004dfc <_dtoa_r+0xa54>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	ddec      	ble.n	8004d96 <_dtoa_r+0x9ee>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	9904      	ldr	r1, [sp, #16]
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 fa8b 	bl	80052dc <__lshift>
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	9004      	str	r0, [sp, #16]
 8004dca:	f000 fadb 	bl	8005384 <__mcmp>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	dc03      	bgt.n	8004dda <_dtoa_r+0xa32>
 8004dd2:	d1e0      	bne.n	8004d96 <_dtoa_r+0x9ee>
 8004dd4:	f018 0f01 	tst.w	r8, #1
 8004dd8:	d0dd      	beq.n	8004d96 <_dtoa_r+0x9ee>
 8004dda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004dde:	d1d8      	bne.n	8004d92 <_dtoa_r+0x9ea>
 8004de0:	9b05      	ldr	r3, [sp, #20]
 8004de2:	9a05      	ldr	r2, [sp, #20]
 8004de4:	1c5d      	adds	r5, r3, #1
 8004de6:	2339      	movs	r3, #57	; 0x39
 8004de8:	7013      	strb	r3, [r2, #0]
 8004dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dee:	2b39      	cmp	r3, #57	; 0x39
 8004df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8004df4:	d04f      	beq.n	8004e96 <_dtoa_r+0xaee>
 8004df6:	3301      	adds	r3, #1
 8004df8:	7013      	strb	r3, [r2, #0]
 8004dfa:	e754      	b.n	8004ca6 <_dtoa_r+0x8fe>
 8004dfc:	9a05      	ldr	r2, [sp, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f102 0501 	add.w	r5, r2, #1
 8004e04:	dd06      	ble.n	8004e14 <_dtoa_r+0xa6c>
 8004e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e0a:	d0e9      	beq.n	8004de0 <_dtoa_r+0xa38>
 8004e0c:	f108 0801 	add.w	r8, r8, #1
 8004e10:	9b05      	ldr	r3, [sp, #20]
 8004e12:	e7c2      	b.n	8004d9a <_dtoa_r+0x9f2>
 8004e14:	9a02      	ldr	r2, [sp, #8]
 8004e16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004e1a:	eba5 030b 	sub.w	r3, r5, fp
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d021      	beq.n	8004e66 <_dtoa_r+0xabe>
 8004e22:	2300      	movs	r3, #0
 8004e24:	220a      	movs	r2, #10
 8004e26:	9904      	ldr	r1, [sp, #16]
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 f8e1 	bl	8004ff0 <__multadd>
 8004e2e:	45b1      	cmp	r9, r6
 8004e30:	9004      	str	r0, [sp, #16]
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	f04f 020a 	mov.w	r2, #10
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	d105      	bne.n	8004e4c <_dtoa_r+0xaa4>
 8004e40:	f000 f8d6 	bl	8004ff0 <__multadd>
 8004e44:	4681      	mov	r9, r0
 8004e46:	4606      	mov	r6, r0
 8004e48:	9505      	str	r5, [sp, #20]
 8004e4a:	e776      	b.n	8004d3a <_dtoa_r+0x992>
 8004e4c:	f000 f8d0 	bl	8004ff0 <__multadd>
 8004e50:	4631      	mov	r1, r6
 8004e52:	4681      	mov	r9, r0
 8004e54:	2300      	movs	r3, #0
 8004e56:	220a      	movs	r2, #10
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 f8c9 	bl	8004ff0 <__multadd>
 8004e5e:	4606      	mov	r6, r0
 8004e60:	e7f2      	b.n	8004e48 <_dtoa_r+0xaa0>
 8004e62:	f04f 0900 	mov.w	r9, #0
 8004e66:	2201      	movs	r2, #1
 8004e68:	9904      	ldr	r1, [sp, #16]
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 fa36 	bl	80052dc <__lshift>
 8004e70:	4639      	mov	r1, r7
 8004e72:	9004      	str	r0, [sp, #16]
 8004e74:	f000 fa86 	bl	8005384 <__mcmp>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	dcb6      	bgt.n	8004dea <_dtoa_r+0xa42>
 8004e7c:	d102      	bne.n	8004e84 <_dtoa_r+0xadc>
 8004e7e:	f018 0f01 	tst.w	r8, #1
 8004e82:	d1b2      	bne.n	8004dea <_dtoa_r+0xa42>
 8004e84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8004e8e:	f47f af0a 	bne.w	8004ca6 <_dtoa_r+0x8fe>
 8004e92:	4615      	mov	r5, r2
 8004e94:	e7f6      	b.n	8004e84 <_dtoa_r+0xadc>
 8004e96:	4593      	cmp	fp, r2
 8004e98:	d105      	bne.n	8004ea6 <_dtoa_r+0xafe>
 8004e9a:	2331      	movs	r3, #49	; 0x31
 8004e9c:	f10a 0a01 	add.w	sl, sl, #1
 8004ea0:	f88b 3000 	strb.w	r3, [fp]
 8004ea4:	e6ff      	b.n	8004ca6 <_dtoa_r+0x8fe>
 8004ea6:	4615      	mov	r5, r2
 8004ea8:	e79f      	b.n	8004dea <_dtoa_r+0xa42>
 8004eaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004f10 <_dtoa_r+0xb68>
 8004eae:	e007      	b.n	8004ec0 <_dtoa_r+0xb18>
 8004eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004f14 <_dtoa_r+0xb6c>
 8004eb6:	b11b      	cbz	r3, 8004ec0 <_dtoa_r+0xb18>
 8004eb8:	f10b 0308 	add.w	r3, fp, #8
 8004ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4658      	mov	r0, fp
 8004ec2:	b017      	add	sp, #92	; 0x5c
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	9b06      	ldr	r3, [sp, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	f77f ae35 	ble.w	8004b3a <_dtoa_r+0x792>
 8004ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	e649      	b.n	8004b6a <_dtoa_r+0x7c2>
 8004ed6:	9b02      	ldr	r3, [sp, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	dc03      	bgt.n	8004ee4 <_dtoa_r+0xb3c>
 8004edc:	9b06      	ldr	r3, [sp, #24]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f73f aecc 	bgt.w	8004c7c <_dtoa_r+0x8d4>
 8004ee4:	465d      	mov	r5, fp
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	9804      	ldr	r0, [sp, #16]
 8004eea:	f7ff f9d1 	bl	8004290 <quorem>
 8004eee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004ef2:	f805 8b01 	strb.w	r8, [r5], #1
 8004ef6:	9a02      	ldr	r2, [sp, #8]
 8004ef8:	eba5 030b 	sub.w	r3, r5, fp
 8004efc:	429a      	cmp	r2, r3
 8004efe:	ddb0      	ble.n	8004e62 <_dtoa_r+0xaba>
 8004f00:	2300      	movs	r3, #0
 8004f02:	220a      	movs	r2, #10
 8004f04:	9904      	ldr	r1, [sp, #16]
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 f872 	bl	8004ff0 <__multadd>
 8004f0c:	9004      	str	r0, [sp, #16]
 8004f0e:	e7ea      	b.n	8004ee6 <_dtoa_r+0xb3e>
 8004f10:	08005a54 	.word	0x08005a54
 8004f14:	08005a78 	.word	0x08005a78

08004f18 <_localeconv_r>:
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <_localeconv_r+0x14>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a18      	ldr	r0, [r3, #32]
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <_localeconv_r+0x18>)
 8004f20:	2800      	cmp	r0, #0
 8004f22:	bf08      	it	eq
 8004f24:	4618      	moveq	r0, r3
 8004f26:	30f0      	adds	r0, #240	; 0xf0
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	2000000c 	.word	0x2000000c
 8004f30:	20000070 	.word	0x20000070

08004f34 <malloc>:
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <malloc+0xc>)
 8004f36:	4601      	mov	r1, r0
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	f000 bb45 	b.w	80055c8 <_malloc_r>
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <memcpy>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	1e43      	subs	r3, r0, #1
 8004f48:	440a      	add	r2, r1
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d100      	bne.n	8004f50 <memcpy+0xc>
 8004f4e:	bd10      	pop	{r4, pc}
 8004f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f58:	e7f7      	b.n	8004f4a <memcpy+0x6>

08004f5a <_Balloc>:
 8004f5a:	b570      	push	{r4, r5, r6, lr}
 8004f5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f5e:	4604      	mov	r4, r0
 8004f60:	460e      	mov	r6, r1
 8004f62:	b93d      	cbnz	r5, 8004f74 <_Balloc+0x1a>
 8004f64:	2010      	movs	r0, #16
 8004f66:	f7ff ffe5 	bl	8004f34 <malloc>
 8004f6a:	6260      	str	r0, [r4, #36]	; 0x24
 8004f6c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f70:	6005      	str	r5, [r0, #0]
 8004f72:	60c5      	str	r5, [r0, #12]
 8004f74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f76:	68eb      	ldr	r3, [r5, #12]
 8004f78:	b183      	cbz	r3, 8004f9c <_Balloc+0x42>
 8004f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004f82:	b9b8      	cbnz	r0, 8004fb4 <_Balloc+0x5a>
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f506 	lsl.w	r5, r1, r6
 8004f8a:	1d6a      	adds	r2, r5, #5
 8004f8c:	0092      	lsls	r2, r2, #2
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 fabe 	bl	8005510 <_calloc_r>
 8004f94:	b160      	cbz	r0, 8004fb0 <_Balloc+0x56>
 8004f96:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004f9a:	e00e      	b.n	8004fba <_Balloc+0x60>
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fab5 	bl	8005510 <_calloc_r>
 8004fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa8:	60e8      	str	r0, [r5, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e4      	bne.n	8004f7a <_Balloc+0x20>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	6802      	ldr	r2, [r0, #0]
 8004fb6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fc0:	e7f7      	b.n	8004fb2 <_Balloc+0x58>

08004fc2 <_Bfree>:
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	460d      	mov	r5, r1
 8004fca:	b93c      	cbnz	r4, 8004fdc <_Bfree+0x1a>
 8004fcc:	2010      	movs	r0, #16
 8004fce:	f7ff ffb1 	bl	8004f34 <malloc>
 8004fd2:	6270      	str	r0, [r6, #36]	; 0x24
 8004fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fd8:	6004      	str	r4, [r0, #0]
 8004fda:	60c4      	str	r4, [r0, #12]
 8004fdc:	b13d      	cbz	r5, 8004fee <_Bfree+0x2c>
 8004fde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004fe0:	686a      	ldr	r2, [r5, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fe8:	6029      	str	r1, [r5, #0]
 8004fea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004fee:	bd70      	pop	{r4, r5, r6, pc}

08004ff0 <__multadd>:
 8004ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff4:	690d      	ldr	r5, [r1, #16]
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	f101 0c14 	add.w	ip, r1, #20
 8005000:	2300      	movs	r3, #0
 8005002:	f8dc 0000 	ldr.w	r0, [ip]
 8005006:	b281      	uxth	r1, r0
 8005008:	fb02 7101 	mla	r1, r2, r1, r7
 800500c:	0c0f      	lsrs	r7, r1, #16
 800500e:	0c00      	lsrs	r0, r0, #16
 8005010:	fb02 7000 	mla	r0, r2, r0, r7
 8005014:	b289      	uxth	r1, r1
 8005016:	3301      	adds	r3, #1
 8005018:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800501c:	429d      	cmp	r5, r3
 800501e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005022:	f84c 1b04 	str.w	r1, [ip], #4
 8005026:	dcec      	bgt.n	8005002 <__multadd+0x12>
 8005028:	b1d7      	cbz	r7, 8005060 <__multadd+0x70>
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	42ab      	cmp	r3, r5
 800502e:	dc12      	bgt.n	8005056 <__multadd+0x66>
 8005030:	6861      	ldr	r1, [r4, #4]
 8005032:	4630      	mov	r0, r6
 8005034:	3101      	adds	r1, #1
 8005036:	f7ff ff90 	bl	8004f5a <_Balloc>
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	3202      	adds	r2, #2
 800503e:	f104 010c 	add.w	r1, r4, #12
 8005042:	4680      	mov	r8, r0
 8005044:	0092      	lsls	r2, r2, #2
 8005046:	300c      	adds	r0, #12
 8005048:	f7ff ff7c 	bl	8004f44 <memcpy>
 800504c:	4621      	mov	r1, r4
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff ffb7 	bl	8004fc2 <_Bfree>
 8005054:	4644      	mov	r4, r8
 8005056:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800505a:	3501      	adds	r5, #1
 800505c:	615f      	str	r7, [r3, #20]
 800505e:	6125      	str	r5, [r4, #16]
 8005060:	4620      	mov	r0, r4
 8005062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005066 <__hi0bits>:
 8005066:	0c02      	lsrs	r2, r0, #16
 8005068:	0412      	lsls	r2, r2, #16
 800506a:	4603      	mov	r3, r0
 800506c:	b9b2      	cbnz	r2, 800509c <__hi0bits+0x36>
 800506e:	0403      	lsls	r3, r0, #16
 8005070:	2010      	movs	r0, #16
 8005072:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005076:	bf04      	itt	eq
 8005078:	021b      	lsleq	r3, r3, #8
 800507a:	3008      	addeq	r0, #8
 800507c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005080:	bf04      	itt	eq
 8005082:	011b      	lsleq	r3, r3, #4
 8005084:	3004      	addeq	r0, #4
 8005086:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800508a:	bf04      	itt	eq
 800508c:	009b      	lsleq	r3, r3, #2
 800508e:	3002      	addeq	r0, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	db06      	blt.n	80050a2 <__hi0bits+0x3c>
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	d503      	bpl.n	80050a0 <__hi0bits+0x3a>
 8005098:	3001      	adds	r0, #1
 800509a:	4770      	bx	lr
 800509c:	2000      	movs	r0, #0
 800509e:	e7e8      	b.n	8005072 <__hi0bits+0xc>
 80050a0:	2020      	movs	r0, #32
 80050a2:	4770      	bx	lr

080050a4 <__lo0bits>:
 80050a4:	6803      	ldr	r3, [r0, #0]
 80050a6:	f013 0207 	ands.w	r2, r3, #7
 80050aa:	4601      	mov	r1, r0
 80050ac:	d00b      	beq.n	80050c6 <__lo0bits+0x22>
 80050ae:	07da      	lsls	r2, r3, #31
 80050b0:	d423      	bmi.n	80050fa <__lo0bits+0x56>
 80050b2:	0798      	lsls	r0, r3, #30
 80050b4:	bf49      	itett	mi
 80050b6:	085b      	lsrmi	r3, r3, #1
 80050b8:	089b      	lsrpl	r3, r3, #2
 80050ba:	2001      	movmi	r0, #1
 80050bc:	600b      	strmi	r3, [r1, #0]
 80050be:	bf5c      	itt	pl
 80050c0:	600b      	strpl	r3, [r1, #0]
 80050c2:	2002      	movpl	r0, #2
 80050c4:	4770      	bx	lr
 80050c6:	b298      	uxth	r0, r3
 80050c8:	b9a8      	cbnz	r0, 80050f6 <__lo0bits+0x52>
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	2010      	movs	r0, #16
 80050ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80050d2:	bf04      	itt	eq
 80050d4:	0a1b      	lsreq	r3, r3, #8
 80050d6:	3008      	addeq	r0, #8
 80050d8:	071a      	lsls	r2, r3, #28
 80050da:	bf04      	itt	eq
 80050dc:	091b      	lsreq	r3, r3, #4
 80050de:	3004      	addeq	r0, #4
 80050e0:	079a      	lsls	r2, r3, #30
 80050e2:	bf04      	itt	eq
 80050e4:	089b      	lsreq	r3, r3, #2
 80050e6:	3002      	addeq	r0, #2
 80050e8:	07da      	lsls	r2, r3, #31
 80050ea:	d402      	bmi.n	80050f2 <__lo0bits+0x4e>
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	d006      	beq.n	80050fe <__lo0bits+0x5a>
 80050f0:	3001      	adds	r0, #1
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	4770      	bx	lr
 80050f6:	4610      	mov	r0, r2
 80050f8:	e7e9      	b.n	80050ce <__lo0bits+0x2a>
 80050fa:	2000      	movs	r0, #0
 80050fc:	4770      	bx	lr
 80050fe:	2020      	movs	r0, #32
 8005100:	4770      	bx	lr

08005102 <__i2b>:
 8005102:	b510      	push	{r4, lr}
 8005104:	460c      	mov	r4, r1
 8005106:	2101      	movs	r1, #1
 8005108:	f7ff ff27 	bl	8004f5a <_Balloc>
 800510c:	2201      	movs	r2, #1
 800510e:	6144      	str	r4, [r0, #20]
 8005110:	6102      	str	r2, [r0, #16]
 8005112:	bd10      	pop	{r4, pc}

08005114 <__multiply>:
 8005114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4614      	mov	r4, r2
 800511a:	690a      	ldr	r2, [r1, #16]
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	bfb8      	it	lt
 8005122:	460b      	movlt	r3, r1
 8005124:	4688      	mov	r8, r1
 8005126:	bfbc      	itt	lt
 8005128:	46a0      	movlt	r8, r4
 800512a:	461c      	movlt	r4, r3
 800512c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005130:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005134:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800513c:	eb07 0609 	add.w	r6, r7, r9
 8005140:	42b3      	cmp	r3, r6
 8005142:	bfb8      	it	lt
 8005144:	3101      	addlt	r1, #1
 8005146:	f7ff ff08 	bl	8004f5a <_Balloc>
 800514a:	f100 0514 	add.w	r5, r0, #20
 800514e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005152:	462b      	mov	r3, r5
 8005154:	2200      	movs	r2, #0
 8005156:	4573      	cmp	r3, lr
 8005158:	d316      	bcc.n	8005188 <__multiply+0x74>
 800515a:	f104 0214 	add.w	r2, r4, #20
 800515e:	f108 0114 	add.w	r1, r8, #20
 8005162:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005166:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	4293      	cmp	r3, r2
 8005172:	d80c      	bhi.n	800518e <__multiply+0x7a>
 8005174:	2e00      	cmp	r6, #0
 8005176:	dd03      	ble.n	8005180 <__multiply+0x6c>
 8005178:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05d      	beq.n	800523c <__multiply+0x128>
 8005180:	6106      	str	r6, [r0, #16]
 8005182:	b003      	add	sp, #12
 8005184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005188:	f843 2b04 	str.w	r2, [r3], #4
 800518c:	e7e3      	b.n	8005156 <__multiply+0x42>
 800518e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005192:	f1bb 0f00 	cmp.w	fp, #0
 8005196:	d023      	beq.n	80051e0 <__multiply+0xcc>
 8005198:	4689      	mov	r9, r1
 800519a:	46ac      	mov	ip, r5
 800519c:	f04f 0800 	mov.w	r8, #0
 80051a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80051a4:	f8dc a000 	ldr.w	sl, [ip]
 80051a8:	b2a3      	uxth	r3, r4
 80051aa:	fa1f fa8a 	uxth.w	sl, sl
 80051ae:	fb0b a303 	mla	r3, fp, r3, sl
 80051b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80051b6:	f8dc 4000 	ldr.w	r4, [ip]
 80051ba:	4443      	add	r3, r8
 80051bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80051c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80051c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80051c8:	46e2      	mov	sl, ip
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80051d0:	454f      	cmp	r7, r9
 80051d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80051d6:	f84a 3b04 	str.w	r3, [sl], #4
 80051da:	d82b      	bhi.n	8005234 <__multiply+0x120>
 80051dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80051e0:	9b01      	ldr	r3, [sp, #4]
 80051e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80051e6:	3204      	adds	r2, #4
 80051e8:	f1ba 0f00 	cmp.w	sl, #0
 80051ec:	d020      	beq.n	8005230 <__multiply+0x11c>
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	4689      	mov	r9, r1
 80051f2:	46a8      	mov	r8, r5
 80051f4:	f04f 0b00 	mov.w	fp, #0
 80051f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80051fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005200:	fb0a 440c 	mla	r4, sl, ip, r4
 8005204:	445c      	add	r4, fp
 8005206:	46c4      	mov	ip, r8
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800520e:	f84c 3b04 	str.w	r3, [ip], #4
 8005212:	f859 3b04 	ldr.w	r3, [r9], #4
 8005216:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	fb0a b303 	mla	r3, sl, r3, fp
 8005220:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005224:	454f      	cmp	r7, r9
 8005226:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800522a:	d805      	bhi.n	8005238 <__multiply+0x124>
 800522c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005230:	3504      	adds	r5, #4
 8005232:	e79b      	b.n	800516c <__multiply+0x58>
 8005234:	46d4      	mov	ip, sl
 8005236:	e7b3      	b.n	80051a0 <__multiply+0x8c>
 8005238:	46e0      	mov	r8, ip
 800523a:	e7dd      	b.n	80051f8 <__multiply+0xe4>
 800523c:	3e01      	subs	r6, #1
 800523e:	e799      	b.n	8005174 <__multiply+0x60>

08005240 <__pow5mult>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	4615      	mov	r5, r2
 8005246:	f012 0203 	ands.w	r2, r2, #3
 800524a:	4606      	mov	r6, r0
 800524c:	460f      	mov	r7, r1
 800524e:	d007      	beq.n	8005260 <__pow5mult+0x20>
 8005250:	3a01      	subs	r2, #1
 8005252:	4c21      	ldr	r4, [pc, #132]	; (80052d8 <__pow5mult+0x98>)
 8005254:	2300      	movs	r3, #0
 8005256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800525a:	f7ff fec9 	bl	8004ff0 <__multadd>
 800525e:	4607      	mov	r7, r0
 8005260:	10ad      	asrs	r5, r5, #2
 8005262:	d035      	beq.n	80052d0 <__pow5mult+0x90>
 8005264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005266:	b93c      	cbnz	r4, 8005278 <__pow5mult+0x38>
 8005268:	2010      	movs	r0, #16
 800526a:	f7ff fe63 	bl	8004f34 <malloc>
 800526e:	6270      	str	r0, [r6, #36]	; 0x24
 8005270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005274:	6004      	str	r4, [r0, #0]
 8005276:	60c4      	str	r4, [r0, #12]
 8005278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800527c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005280:	b94c      	cbnz	r4, 8005296 <__pow5mult+0x56>
 8005282:	f240 2171 	movw	r1, #625	; 0x271
 8005286:	4630      	mov	r0, r6
 8005288:	f7ff ff3b 	bl	8005102 <__i2b>
 800528c:	2300      	movs	r3, #0
 800528e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005292:	4604      	mov	r4, r0
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	f04f 0800 	mov.w	r8, #0
 800529a:	07eb      	lsls	r3, r5, #31
 800529c:	d50a      	bpl.n	80052b4 <__pow5mult+0x74>
 800529e:	4639      	mov	r1, r7
 80052a0:	4622      	mov	r2, r4
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7ff ff36 	bl	8005114 <__multiply>
 80052a8:	4639      	mov	r1, r7
 80052aa:	4681      	mov	r9, r0
 80052ac:	4630      	mov	r0, r6
 80052ae:	f7ff fe88 	bl	8004fc2 <_Bfree>
 80052b2:	464f      	mov	r7, r9
 80052b4:	106d      	asrs	r5, r5, #1
 80052b6:	d00b      	beq.n	80052d0 <__pow5mult+0x90>
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	b938      	cbnz	r0, 80052cc <__pow5mult+0x8c>
 80052bc:	4622      	mov	r2, r4
 80052be:	4621      	mov	r1, r4
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff ff27 	bl	8005114 <__multiply>
 80052c6:	6020      	str	r0, [r4, #0]
 80052c8:	f8c0 8000 	str.w	r8, [r0]
 80052cc:	4604      	mov	r4, r0
 80052ce:	e7e4      	b.n	800529a <__pow5mult+0x5a>
 80052d0:	4638      	mov	r0, r7
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	bf00      	nop
 80052d8:	08005b78 	.word	0x08005b78

080052dc <__lshift>:
 80052dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	6849      	ldr	r1, [r1, #4]
 80052ea:	eb0a 0903 	add.w	r9, sl, r3
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	4607      	mov	r7, r0
 80052f2:	4616      	mov	r6, r2
 80052f4:	f109 0501 	add.w	r5, r9, #1
 80052f8:	42ab      	cmp	r3, r5
 80052fa:	db32      	blt.n	8005362 <__lshift+0x86>
 80052fc:	4638      	mov	r0, r7
 80052fe:	f7ff fe2c 	bl	8004f5a <_Balloc>
 8005302:	2300      	movs	r3, #0
 8005304:	4680      	mov	r8, r0
 8005306:	f100 0114 	add.w	r1, r0, #20
 800530a:	461a      	mov	r2, r3
 800530c:	4553      	cmp	r3, sl
 800530e:	db2b      	blt.n	8005368 <__lshift+0x8c>
 8005310:	6920      	ldr	r0, [r4, #16]
 8005312:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005316:	f104 0314 	add.w	r3, r4, #20
 800531a:	f016 021f 	ands.w	r2, r6, #31
 800531e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005322:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005326:	d025      	beq.n	8005374 <__lshift+0x98>
 8005328:	f1c2 0e20 	rsb	lr, r2, #32
 800532c:	2000      	movs	r0, #0
 800532e:	681e      	ldr	r6, [r3, #0]
 8005330:	468a      	mov	sl, r1
 8005332:	4096      	lsls	r6, r2
 8005334:	4330      	orrs	r0, r6
 8005336:	f84a 0b04 	str.w	r0, [sl], #4
 800533a:	f853 0b04 	ldr.w	r0, [r3], #4
 800533e:	459c      	cmp	ip, r3
 8005340:	fa20 f00e 	lsr.w	r0, r0, lr
 8005344:	d814      	bhi.n	8005370 <__lshift+0x94>
 8005346:	6048      	str	r0, [r1, #4]
 8005348:	b108      	cbz	r0, 800534e <__lshift+0x72>
 800534a:	f109 0502 	add.w	r5, r9, #2
 800534e:	3d01      	subs	r5, #1
 8005350:	4638      	mov	r0, r7
 8005352:	f8c8 5010 	str.w	r5, [r8, #16]
 8005356:	4621      	mov	r1, r4
 8005358:	f7ff fe33 	bl	8004fc2 <_Bfree>
 800535c:	4640      	mov	r0, r8
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	3101      	adds	r1, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	e7c7      	b.n	80052f8 <__lshift+0x1c>
 8005368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800536c:	3301      	adds	r3, #1
 800536e:	e7cd      	b.n	800530c <__lshift+0x30>
 8005370:	4651      	mov	r1, sl
 8005372:	e7dc      	b.n	800532e <__lshift+0x52>
 8005374:	3904      	subs	r1, #4
 8005376:	f853 2b04 	ldr.w	r2, [r3], #4
 800537a:	f841 2f04 	str.w	r2, [r1, #4]!
 800537e:	459c      	cmp	ip, r3
 8005380:	d8f9      	bhi.n	8005376 <__lshift+0x9a>
 8005382:	e7e4      	b.n	800534e <__lshift+0x72>

08005384 <__mcmp>:
 8005384:	6903      	ldr	r3, [r0, #16]
 8005386:	690a      	ldr	r2, [r1, #16]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	b530      	push	{r4, r5, lr}
 800538c:	d10c      	bne.n	80053a8 <__mcmp+0x24>
 800538e:	0092      	lsls	r2, r2, #2
 8005390:	3014      	adds	r0, #20
 8005392:	3114      	adds	r1, #20
 8005394:	1884      	adds	r4, r0, r2
 8005396:	4411      	add	r1, r2
 8005398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800539c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80053a0:	4295      	cmp	r5, r2
 80053a2:	d003      	beq.n	80053ac <__mcmp+0x28>
 80053a4:	d305      	bcc.n	80053b2 <__mcmp+0x2e>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd30      	pop	{r4, r5, pc}
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	d3f3      	bcc.n	8005398 <__mcmp+0x14>
 80053b0:	e7fa      	b.n	80053a8 <__mcmp+0x24>
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
 80053b6:	e7f7      	b.n	80053a8 <__mcmp+0x24>

080053b8 <__mdiff>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	460d      	mov	r5, r1
 80053be:	4607      	mov	r7, r0
 80053c0:	4611      	mov	r1, r2
 80053c2:	4628      	mov	r0, r5
 80053c4:	4614      	mov	r4, r2
 80053c6:	f7ff ffdd 	bl	8005384 <__mcmp>
 80053ca:	1e06      	subs	r6, r0, #0
 80053cc:	d108      	bne.n	80053e0 <__mdiff+0x28>
 80053ce:	4631      	mov	r1, r6
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7ff fdc2 	bl	8004f5a <_Balloc>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80053dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e0:	bfa4      	itt	ge
 80053e2:	4623      	movge	r3, r4
 80053e4:	462c      	movge	r4, r5
 80053e6:	4638      	mov	r0, r7
 80053e8:	6861      	ldr	r1, [r4, #4]
 80053ea:	bfa6      	itte	ge
 80053ec:	461d      	movge	r5, r3
 80053ee:	2600      	movge	r6, #0
 80053f0:	2601      	movlt	r6, #1
 80053f2:	f7ff fdb2 	bl	8004f5a <_Balloc>
 80053f6:	692b      	ldr	r3, [r5, #16]
 80053f8:	60c6      	str	r6, [r0, #12]
 80053fa:	6926      	ldr	r6, [r4, #16]
 80053fc:	f105 0914 	add.w	r9, r5, #20
 8005400:	f104 0214 	add.w	r2, r4, #20
 8005404:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005408:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800540c:	f100 0514 	add.w	r5, r0, #20
 8005410:	f04f 0e00 	mov.w	lr, #0
 8005414:	f852 ab04 	ldr.w	sl, [r2], #4
 8005418:	f859 4b04 	ldr.w	r4, [r9], #4
 800541c:	fa1e f18a 	uxtah	r1, lr, sl
 8005420:	b2a3      	uxth	r3, r4
 8005422:	1ac9      	subs	r1, r1, r3
 8005424:	0c23      	lsrs	r3, r4, #16
 8005426:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800542a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800542e:	b289      	uxth	r1, r1
 8005430:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005434:	45c8      	cmp	r8, r9
 8005436:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800543a:	4694      	mov	ip, r2
 800543c:	f845 3b04 	str.w	r3, [r5], #4
 8005440:	d8e8      	bhi.n	8005414 <__mdiff+0x5c>
 8005442:	45bc      	cmp	ip, r7
 8005444:	d304      	bcc.n	8005450 <__mdiff+0x98>
 8005446:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800544a:	b183      	cbz	r3, 800546e <__mdiff+0xb6>
 800544c:	6106      	str	r6, [r0, #16]
 800544e:	e7c5      	b.n	80053dc <__mdiff+0x24>
 8005450:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005454:	fa1e f381 	uxtah	r3, lr, r1
 8005458:	141a      	asrs	r2, r3, #16
 800545a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005464:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005468:	f845 3b04 	str.w	r3, [r5], #4
 800546c:	e7e9      	b.n	8005442 <__mdiff+0x8a>
 800546e:	3e01      	subs	r6, #1
 8005470:	e7e9      	b.n	8005446 <__mdiff+0x8e>

08005472 <__d2b>:
 8005472:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005476:	460e      	mov	r6, r1
 8005478:	2101      	movs	r1, #1
 800547a:	ec59 8b10 	vmov	r8, r9, d0
 800547e:	4615      	mov	r5, r2
 8005480:	f7ff fd6b 	bl	8004f5a <_Balloc>
 8005484:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005488:	4607      	mov	r7, r0
 800548a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800548e:	bb34      	cbnz	r4, 80054de <__d2b+0x6c>
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	f1b8 0300 	subs.w	r3, r8, #0
 8005496:	d027      	beq.n	80054e8 <__d2b+0x76>
 8005498:	a802      	add	r0, sp, #8
 800549a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800549e:	f7ff fe01 	bl	80050a4 <__lo0bits>
 80054a2:	9900      	ldr	r1, [sp, #0]
 80054a4:	b1f0      	cbz	r0, 80054e4 <__d2b+0x72>
 80054a6:	9a01      	ldr	r2, [sp, #4]
 80054a8:	f1c0 0320 	rsb	r3, r0, #32
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	430b      	orrs	r3, r1
 80054b2:	40c2      	lsrs	r2, r0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	9201      	str	r2, [sp, #4]
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf14      	ite	ne
 80054c0:	2102      	movne	r1, #2
 80054c2:	2101      	moveq	r1, #1
 80054c4:	6139      	str	r1, [r7, #16]
 80054c6:	b1c4      	cbz	r4, 80054fa <__d2b+0x88>
 80054c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80054cc:	4404      	add	r4, r0
 80054ce:	6034      	str	r4, [r6, #0]
 80054d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80054d4:	6028      	str	r0, [r5, #0]
 80054d6:	4638      	mov	r0, r7
 80054d8:	b003      	add	sp, #12
 80054da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e2:	e7d5      	b.n	8005490 <__d2b+0x1e>
 80054e4:	6179      	str	r1, [r7, #20]
 80054e6:	e7e7      	b.n	80054b8 <__d2b+0x46>
 80054e8:	a801      	add	r0, sp, #4
 80054ea:	f7ff fddb 	bl	80050a4 <__lo0bits>
 80054ee:	9b01      	ldr	r3, [sp, #4]
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	2101      	movs	r1, #1
 80054f4:	6139      	str	r1, [r7, #16]
 80054f6:	3020      	adds	r0, #32
 80054f8:	e7e5      	b.n	80054c6 <__d2b+0x54>
 80054fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80054fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005502:	6030      	str	r0, [r6, #0]
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	f7ff fdae 	bl	8005066 <__hi0bits>
 800550a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800550e:	e7e1      	b.n	80054d4 <__d2b+0x62>

08005510 <_calloc_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	fb02 f401 	mul.w	r4, r2, r1
 8005516:	4621      	mov	r1, r4
 8005518:	f000 f856 	bl	80055c8 <_malloc_r>
 800551c:	4605      	mov	r5, r0
 800551e:	b118      	cbz	r0, 8005528 <_calloc_r+0x18>
 8005520:	4622      	mov	r2, r4
 8005522:	2100      	movs	r1, #0
 8005524:	f7fe fa30 	bl	8003988 <memset>
 8005528:	4628      	mov	r0, r5
 800552a:	bd38      	pop	{r3, r4, r5, pc}

0800552c <_free_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4605      	mov	r5, r0
 8005530:	2900      	cmp	r1, #0
 8005532:	d045      	beq.n	80055c0 <_free_r+0x94>
 8005534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005538:	1f0c      	subs	r4, r1, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfb8      	it	lt
 800553e:	18e4      	addlt	r4, r4, r3
 8005540:	f000 fa29 	bl	8005996 <__malloc_lock>
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <_free_r+0x98>)
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	4610      	mov	r0, r2
 800554a:	b933      	cbnz	r3, 800555a <_free_r+0x2e>
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6014      	str	r4, [r2, #0]
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005556:	f000 ba1f 	b.w	8005998 <__malloc_unlock>
 800555a:	42a3      	cmp	r3, r4
 800555c:	d90c      	bls.n	8005578 <_free_r+0x4c>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	1862      	adds	r2, r4, r1
 8005562:	4293      	cmp	r3, r2
 8005564:	bf04      	itt	eq
 8005566:	681a      	ldreq	r2, [r3, #0]
 8005568:	685b      	ldreq	r3, [r3, #4]
 800556a:	6063      	str	r3, [r4, #4]
 800556c:	bf04      	itt	eq
 800556e:	1852      	addeq	r2, r2, r1
 8005570:	6022      	streq	r2, [r4, #0]
 8005572:	6004      	str	r4, [r0, #0]
 8005574:	e7ec      	b.n	8005550 <_free_r+0x24>
 8005576:	4613      	mov	r3, r2
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	b10a      	cbz	r2, 8005580 <_free_r+0x54>
 800557c:	42a2      	cmp	r2, r4
 800557e:	d9fa      	bls.n	8005576 <_free_r+0x4a>
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	1858      	adds	r0, r3, r1
 8005584:	42a0      	cmp	r0, r4
 8005586:	d10b      	bne.n	80055a0 <_free_r+0x74>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	4401      	add	r1, r0
 800558c:	1858      	adds	r0, r3, r1
 800558e:	4282      	cmp	r2, r0
 8005590:	6019      	str	r1, [r3, #0]
 8005592:	d1dd      	bne.n	8005550 <_free_r+0x24>
 8005594:	6810      	ldr	r0, [r2, #0]
 8005596:	6852      	ldr	r2, [r2, #4]
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	4401      	add	r1, r0
 800559c:	6019      	str	r1, [r3, #0]
 800559e:	e7d7      	b.n	8005550 <_free_r+0x24>
 80055a0:	d902      	bls.n	80055a8 <_free_r+0x7c>
 80055a2:	230c      	movs	r3, #12
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	e7d3      	b.n	8005550 <_free_r+0x24>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	1821      	adds	r1, r4, r0
 80055ac:	428a      	cmp	r2, r1
 80055ae:	bf04      	itt	eq
 80055b0:	6811      	ldreq	r1, [r2, #0]
 80055b2:	6852      	ldreq	r2, [r2, #4]
 80055b4:	6062      	str	r2, [r4, #4]
 80055b6:	bf04      	itt	eq
 80055b8:	1809      	addeq	r1, r1, r0
 80055ba:	6021      	streq	r1, [r4, #0]
 80055bc:	605c      	str	r4, [r3, #4]
 80055be:	e7c7      	b.n	8005550 <_free_r+0x24>
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
 80055c2:	bf00      	nop
 80055c4:	200001fc 	.word	0x200001fc

080055c8 <_malloc_r>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	1ccd      	adds	r5, r1, #3
 80055cc:	f025 0503 	bic.w	r5, r5, #3
 80055d0:	3508      	adds	r5, #8
 80055d2:	2d0c      	cmp	r5, #12
 80055d4:	bf38      	it	cc
 80055d6:	250c      	movcc	r5, #12
 80055d8:	2d00      	cmp	r5, #0
 80055da:	4606      	mov	r6, r0
 80055dc:	db01      	blt.n	80055e2 <_malloc_r+0x1a>
 80055de:	42a9      	cmp	r1, r5
 80055e0:	d903      	bls.n	80055ea <_malloc_r+0x22>
 80055e2:	230c      	movs	r3, #12
 80055e4:	6033      	str	r3, [r6, #0]
 80055e6:	2000      	movs	r0, #0
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	f000 f9d4 	bl	8005996 <__malloc_lock>
 80055ee:	4a21      	ldr	r2, [pc, #132]	; (8005674 <_malloc_r+0xac>)
 80055f0:	6814      	ldr	r4, [r2, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	b991      	cbnz	r1, 800561c <_malloc_r+0x54>
 80055f6:	4c20      	ldr	r4, [pc, #128]	; (8005678 <_malloc_r+0xb0>)
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	b91b      	cbnz	r3, 8005604 <_malloc_r+0x3c>
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 f98f 	bl	8005920 <_sbrk_r>
 8005602:	6020      	str	r0, [r4, #0]
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f000 f98a 	bl	8005920 <_sbrk_r>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d124      	bne.n	800565a <_malloc_r+0x92>
 8005610:	230c      	movs	r3, #12
 8005612:	6033      	str	r3, [r6, #0]
 8005614:	4630      	mov	r0, r6
 8005616:	f000 f9bf 	bl	8005998 <__malloc_unlock>
 800561a:	e7e4      	b.n	80055e6 <_malloc_r+0x1e>
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	1b5b      	subs	r3, r3, r5
 8005620:	d418      	bmi.n	8005654 <_malloc_r+0x8c>
 8005622:	2b0b      	cmp	r3, #11
 8005624:	d90f      	bls.n	8005646 <_malloc_r+0x7e>
 8005626:	600b      	str	r3, [r1, #0]
 8005628:	50cd      	str	r5, [r1, r3]
 800562a:	18cc      	adds	r4, r1, r3
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f9b3 	bl	8005998 <__malloc_unlock>
 8005632:	f104 000b 	add.w	r0, r4, #11
 8005636:	1d23      	adds	r3, r4, #4
 8005638:	f020 0007 	bic.w	r0, r0, #7
 800563c:	1ac3      	subs	r3, r0, r3
 800563e:	d0d3      	beq.n	80055e8 <_malloc_r+0x20>
 8005640:	425a      	negs	r2, r3
 8005642:	50e2      	str	r2, [r4, r3]
 8005644:	e7d0      	b.n	80055e8 <_malloc_r+0x20>
 8005646:	428c      	cmp	r4, r1
 8005648:	684b      	ldr	r3, [r1, #4]
 800564a:	bf16      	itet	ne
 800564c:	6063      	strne	r3, [r4, #4]
 800564e:	6013      	streq	r3, [r2, #0]
 8005650:	460c      	movne	r4, r1
 8005652:	e7eb      	b.n	800562c <_malloc_r+0x64>
 8005654:	460c      	mov	r4, r1
 8005656:	6849      	ldr	r1, [r1, #4]
 8005658:	e7cc      	b.n	80055f4 <_malloc_r+0x2c>
 800565a:	1cc4      	adds	r4, r0, #3
 800565c:	f024 0403 	bic.w	r4, r4, #3
 8005660:	42a0      	cmp	r0, r4
 8005662:	d005      	beq.n	8005670 <_malloc_r+0xa8>
 8005664:	1a21      	subs	r1, r4, r0
 8005666:	4630      	mov	r0, r6
 8005668:	f000 f95a 	bl	8005920 <_sbrk_r>
 800566c:	3001      	adds	r0, #1
 800566e:	d0cf      	beq.n	8005610 <_malloc_r+0x48>
 8005670:	6025      	str	r5, [r4, #0]
 8005672:	e7db      	b.n	800562c <_malloc_r+0x64>
 8005674:	200001fc 	.word	0x200001fc
 8005678:	20000200 	.word	0x20000200

0800567c <__ssputs_r>:
 800567c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	688e      	ldr	r6, [r1, #8]
 8005682:	429e      	cmp	r6, r3
 8005684:	4682      	mov	sl, r0
 8005686:	460c      	mov	r4, r1
 8005688:	4690      	mov	r8, r2
 800568a:	4699      	mov	r9, r3
 800568c:	d837      	bhi.n	80056fe <__ssputs_r+0x82>
 800568e:	898a      	ldrh	r2, [r1, #12]
 8005690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005694:	d031      	beq.n	80056fa <__ssputs_r+0x7e>
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	6909      	ldr	r1, [r1, #16]
 800569a:	1a6f      	subs	r7, r5, r1
 800569c:	6965      	ldr	r5, [r4, #20]
 800569e:	2302      	movs	r3, #2
 80056a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80056a8:	f109 0301 	add.w	r3, r9, #1
 80056ac:	443b      	add	r3, r7
 80056ae:	429d      	cmp	r5, r3
 80056b0:	bf38      	it	cc
 80056b2:	461d      	movcc	r5, r3
 80056b4:	0553      	lsls	r3, r2, #21
 80056b6:	d530      	bpl.n	800571a <__ssputs_r+0x9e>
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7ff ff85 	bl	80055c8 <_malloc_r>
 80056be:	4606      	mov	r6, r0
 80056c0:	b950      	cbnz	r0, 80056d8 <__ssputs_r+0x5c>
 80056c2:	230c      	movs	r3, #12
 80056c4:	f8ca 3000 	str.w	r3, [sl]
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d8:	463a      	mov	r2, r7
 80056da:	6921      	ldr	r1, [r4, #16]
 80056dc:	f7ff fc32 	bl	8004f44 <memcpy>
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	6126      	str	r6, [r4, #16]
 80056ee:	6165      	str	r5, [r4, #20]
 80056f0:	443e      	add	r6, r7
 80056f2:	1bed      	subs	r5, r5, r7
 80056f4:	6026      	str	r6, [r4, #0]
 80056f6:	60a5      	str	r5, [r4, #8]
 80056f8:	464e      	mov	r6, r9
 80056fa:	454e      	cmp	r6, r9
 80056fc:	d900      	bls.n	8005700 <__ssputs_r+0x84>
 80056fe:	464e      	mov	r6, r9
 8005700:	4632      	mov	r2, r6
 8005702:	4641      	mov	r1, r8
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	f000 f92d 	bl	8005964 <memmove>
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	1b9b      	subs	r3, r3, r6
 800570e:	60a3      	str	r3, [r4, #8]
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	441e      	add	r6, r3
 8005714:	6026      	str	r6, [r4, #0]
 8005716:	2000      	movs	r0, #0
 8005718:	e7dc      	b.n	80056d4 <__ssputs_r+0x58>
 800571a:	462a      	mov	r2, r5
 800571c:	f000 f93d 	bl	800599a <_realloc_r>
 8005720:	4606      	mov	r6, r0
 8005722:	2800      	cmp	r0, #0
 8005724:	d1e2      	bne.n	80056ec <__ssputs_r+0x70>
 8005726:	6921      	ldr	r1, [r4, #16]
 8005728:	4650      	mov	r0, sl
 800572a:	f7ff feff 	bl	800552c <_free_r>
 800572e:	e7c8      	b.n	80056c2 <__ssputs_r+0x46>

08005730 <_svfiprintf_r>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	461d      	mov	r5, r3
 8005736:	898b      	ldrh	r3, [r1, #12]
 8005738:	061f      	lsls	r7, r3, #24
 800573a:	b09d      	sub	sp, #116	; 0x74
 800573c:	4680      	mov	r8, r0
 800573e:	460c      	mov	r4, r1
 8005740:	4616      	mov	r6, r2
 8005742:	d50f      	bpl.n	8005764 <_svfiprintf_r+0x34>
 8005744:	690b      	ldr	r3, [r1, #16]
 8005746:	b96b      	cbnz	r3, 8005764 <_svfiprintf_r+0x34>
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	f7ff ff3d 	bl	80055c8 <_malloc_r>
 800574e:	6020      	str	r0, [r4, #0]
 8005750:	6120      	str	r0, [r4, #16]
 8005752:	b928      	cbnz	r0, 8005760 <_svfiprintf_r+0x30>
 8005754:	230c      	movs	r3, #12
 8005756:	f8c8 3000 	str.w	r3, [r8]
 800575a:	f04f 30ff 	mov.w	r0, #4294967295
 800575e:	e0c8      	b.n	80058f2 <_svfiprintf_r+0x1c2>
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	6163      	str	r3, [r4, #20]
 8005764:	2300      	movs	r3, #0
 8005766:	9309      	str	r3, [sp, #36]	; 0x24
 8005768:	2320      	movs	r3, #32
 800576a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800576e:	2330      	movs	r3, #48	; 0x30
 8005770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005774:	9503      	str	r5, [sp, #12]
 8005776:	f04f 0b01 	mov.w	fp, #1
 800577a:	4637      	mov	r7, r6
 800577c:	463d      	mov	r5, r7
 800577e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005782:	b10b      	cbz	r3, 8005788 <_svfiprintf_r+0x58>
 8005784:	2b25      	cmp	r3, #37	; 0x25
 8005786:	d13e      	bne.n	8005806 <_svfiprintf_r+0xd6>
 8005788:	ebb7 0a06 	subs.w	sl, r7, r6
 800578c:	d00b      	beq.n	80057a6 <_svfiprintf_r+0x76>
 800578e:	4653      	mov	r3, sl
 8005790:	4632      	mov	r2, r6
 8005792:	4621      	mov	r1, r4
 8005794:	4640      	mov	r0, r8
 8005796:	f7ff ff71 	bl	800567c <__ssputs_r>
 800579a:	3001      	adds	r0, #1
 800579c:	f000 80a4 	beq.w	80058e8 <_svfiprintf_r+0x1b8>
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	4453      	add	r3, sl
 80057a4:	9309      	str	r3, [sp, #36]	; 0x24
 80057a6:	783b      	ldrb	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 809d 	beq.w	80058e8 <_svfiprintf_r+0x1b8>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	9307      	str	r3, [sp, #28]
 80057bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057c0:	931a      	str	r3, [sp, #104]	; 0x68
 80057c2:	462f      	mov	r7, r5
 80057c4:	2205      	movs	r2, #5
 80057c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80057ca:	4850      	ldr	r0, [pc, #320]	; (800590c <_svfiprintf_r+0x1dc>)
 80057cc:	f7fa fd28 	bl	8000220 <memchr>
 80057d0:	9b04      	ldr	r3, [sp, #16]
 80057d2:	b9d0      	cbnz	r0, 800580a <_svfiprintf_r+0xda>
 80057d4:	06d9      	lsls	r1, r3, #27
 80057d6:	bf44      	itt	mi
 80057d8:	2220      	movmi	r2, #32
 80057da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057de:	071a      	lsls	r2, r3, #28
 80057e0:	bf44      	itt	mi
 80057e2:	222b      	movmi	r2, #43	; 0x2b
 80057e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057e8:	782a      	ldrb	r2, [r5, #0]
 80057ea:	2a2a      	cmp	r2, #42	; 0x2a
 80057ec:	d015      	beq.n	800581a <_svfiprintf_r+0xea>
 80057ee:	9a07      	ldr	r2, [sp, #28]
 80057f0:	462f      	mov	r7, r5
 80057f2:	2000      	movs	r0, #0
 80057f4:	250a      	movs	r5, #10
 80057f6:	4639      	mov	r1, r7
 80057f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057fc:	3b30      	subs	r3, #48	; 0x30
 80057fe:	2b09      	cmp	r3, #9
 8005800:	d94d      	bls.n	800589e <_svfiprintf_r+0x16e>
 8005802:	b1b8      	cbz	r0, 8005834 <_svfiprintf_r+0x104>
 8005804:	e00f      	b.n	8005826 <_svfiprintf_r+0xf6>
 8005806:	462f      	mov	r7, r5
 8005808:	e7b8      	b.n	800577c <_svfiprintf_r+0x4c>
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <_svfiprintf_r+0x1dc>)
 800580c:	1a80      	subs	r0, r0, r2
 800580e:	fa0b f000 	lsl.w	r0, fp, r0
 8005812:	4318      	orrs	r0, r3
 8005814:	9004      	str	r0, [sp, #16]
 8005816:	463d      	mov	r5, r7
 8005818:	e7d3      	b.n	80057c2 <_svfiprintf_r+0x92>
 800581a:	9a03      	ldr	r2, [sp, #12]
 800581c:	1d11      	adds	r1, r2, #4
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	9103      	str	r1, [sp, #12]
 8005822:	2a00      	cmp	r2, #0
 8005824:	db01      	blt.n	800582a <_svfiprintf_r+0xfa>
 8005826:	9207      	str	r2, [sp, #28]
 8005828:	e004      	b.n	8005834 <_svfiprintf_r+0x104>
 800582a:	4252      	negs	r2, r2
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	9207      	str	r2, [sp, #28]
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	783b      	ldrb	r3, [r7, #0]
 8005836:	2b2e      	cmp	r3, #46	; 0x2e
 8005838:	d10c      	bne.n	8005854 <_svfiprintf_r+0x124>
 800583a:	787b      	ldrb	r3, [r7, #1]
 800583c:	2b2a      	cmp	r3, #42	; 0x2a
 800583e:	d133      	bne.n	80058a8 <_svfiprintf_r+0x178>
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	9203      	str	r2, [sp, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	bfb8      	it	lt
 800584c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005850:	3702      	adds	r7, #2
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	4d2e      	ldr	r5, [pc, #184]	; (8005910 <_svfiprintf_r+0x1e0>)
 8005856:	7839      	ldrb	r1, [r7, #0]
 8005858:	2203      	movs	r2, #3
 800585a:	4628      	mov	r0, r5
 800585c:	f7fa fce0 	bl	8000220 <memchr>
 8005860:	b138      	cbz	r0, 8005872 <_svfiprintf_r+0x142>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	1b40      	subs	r0, r0, r5
 8005866:	fa03 f000 	lsl.w	r0, r3, r0
 800586a:	9b04      	ldr	r3, [sp, #16]
 800586c:	4303      	orrs	r3, r0
 800586e:	3701      	adds	r7, #1
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	7839      	ldrb	r1, [r7, #0]
 8005874:	4827      	ldr	r0, [pc, #156]	; (8005914 <_svfiprintf_r+0x1e4>)
 8005876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800587a:	2206      	movs	r2, #6
 800587c:	1c7e      	adds	r6, r7, #1
 800587e:	f7fa fccf 	bl	8000220 <memchr>
 8005882:	2800      	cmp	r0, #0
 8005884:	d038      	beq.n	80058f8 <_svfiprintf_r+0x1c8>
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <_svfiprintf_r+0x1e8>)
 8005888:	bb13      	cbnz	r3, 80058d0 <_svfiprintf_r+0x1a0>
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	3307      	adds	r3, #7
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	3308      	adds	r3, #8
 8005894:	9303      	str	r3, [sp, #12]
 8005896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005898:	444b      	add	r3, r9
 800589a:	9309      	str	r3, [sp, #36]	; 0x24
 800589c:	e76d      	b.n	800577a <_svfiprintf_r+0x4a>
 800589e:	fb05 3202 	mla	r2, r5, r2, r3
 80058a2:	2001      	movs	r0, #1
 80058a4:	460f      	mov	r7, r1
 80058a6:	e7a6      	b.n	80057f6 <_svfiprintf_r+0xc6>
 80058a8:	2300      	movs	r3, #0
 80058aa:	3701      	adds	r7, #1
 80058ac:	9305      	str	r3, [sp, #20]
 80058ae:	4619      	mov	r1, r3
 80058b0:	250a      	movs	r5, #10
 80058b2:	4638      	mov	r0, r7
 80058b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b8:	3a30      	subs	r2, #48	; 0x30
 80058ba:	2a09      	cmp	r2, #9
 80058bc:	d903      	bls.n	80058c6 <_svfiprintf_r+0x196>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0c8      	beq.n	8005854 <_svfiprintf_r+0x124>
 80058c2:	9105      	str	r1, [sp, #20]
 80058c4:	e7c6      	b.n	8005854 <_svfiprintf_r+0x124>
 80058c6:	fb05 2101 	mla	r1, r5, r1, r2
 80058ca:	2301      	movs	r3, #1
 80058cc:	4607      	mov	r7, r0
 80058ce:	e7f0      	b.n	80058b2 <_svfiprintf_r+0x182>
 80058d0:	ab03      	add	r3, sp, #12
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	4622      	mov	r2, r4
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <_svfiprintf_r+0x1ec>)
 80058d8:	a904      	add	r1, sp, #16
 80058da:	4640      	mov	r0, r8
 80058dc:	f7fe f8f0 	bl	8003ac0 <_printf_float>
 80058e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058e4:	4681      	mov	r9, r0
 80058e6:	d1d6      	bne.n	8005896 <_svfiprintf_r+0x166>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	065b      	lsls	r3, r3, #25
 80058ec:	f53f af35 	bmi.w	800575a <_svfiprintf_r+0x2a>
 80058f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f2:	b01d      	add	sp, #116	; 0x74
 80058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f8:	ab03      	add	r3, sp, #12
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4622      	mov	r2, r4
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <_svfiprintf_r+0x1ec>)
 8005900:	a904      	add	r1, sp, #16
 8005902:	4640      	mov	r0, r8
 8005904:	f7fe fb92 	bl	800402c <_printf_i>
 8005908:	e7ea      	b.n	80058e0 <_svfiprintf_r+0x1b0>
 800590a:	bf00      	nop
 800590c:	08005b84 	.word	0x08005b84
 8005910:	08005b8a 	.word	0x08005b8a
 8005914:	08005b8e 	.word	0x08005b8e
 8005918:	08003ac1 	.word	0x08003ac1
 800591c:	0800567d 	.word	0x0800567d

08005920 <_sbrk_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4c06      	ldr	r4, [pc, #24]	; (800593c <_sbrk_r+0x1c>)
 8005924:	2300      	movs	r3, #0
 8005926:	4605      	mov	r5, r0
 8005928:	4608      	mov	r0, r1
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	f7fb fedc 	bl	80016e8 <_sbrk>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_sbrk_r+0x1a>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	b103      	cbz	r3, 800593a <_sbrk_r+0x1a>
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20000290 	.word	0x20000290

08005940 <__ascii_mbtowc>:
 8005940:	b082      	sub	sp, #8
 8005942:	b901      	cbnz	r1, 8005946 <__ascii_mbtowc+0x6>
 8005944:	a901      	add	r1, sp, #4
 8005946:	b142      	cbz	r2, 800595a <__ascii_mbtowc+0x1a>
 8005948:	b14b      	cbz	r3, 800595e <__ascii_mbtowc+0x1e>
 800594a:	7813      	ldrb	r3, [r2, #0]
 800594c:	600b      	str	r3, [r1, #0]
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	1c10      	adds	r0, r2, #0
 8005952:	bf18      	it	ne
 8005954:	2001      	movne	r0, #1
 8005956:	b002      	add	sp, #8
 8005958:	4770      	bx	lr
 800595a:	4610      	mov	r0, r2
 800595c:	e7fb      	b.n	8005956 <__ascii_mbtowc+0x16>
 800595e:	f06f 0001 	mvn.w	r0, #1
 8005962:	e7f8      	b.n	8005956 <__ascii_mbtowc+0x16>

08005964 <memmove>:
 8005964:	4288      	cmp	r0, r1
 8005966:	b510      	push	{r4, lr}
 8005968:	eb01 0302 	add.w	r3, r1, r2
 800596c:	d807      	bhi.n	800597e <memmove+0x1a>
 800596e:	1e42      	subs	r2, r0, #1
 8005970:	4299      	cmp	r1, r3
 8005972:	d00a      	beq.n	800598a <memmove+0x26>
 8005974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005978:	f802 4f01 	strb.w	r4, [r2, #1]!
 800597c:	e7f8      	b.n	8005970 <memmove+0xc>
 800597e:	4283      	cmp	r3, r0
 8005980:	d9f5      	bls.n	800596e <memmove+0xa>
 8005982:	1881      	adds	r1, r0, r2
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	42d3      	cmn	r3, r2
 8005988:	d100      	bne.n	800598c <memmove+0x28>
 800598a:	bd10      	pop	{r4, pc}
 800598c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005990:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005994:	e7f7      	b.n	8005986 <memmove+0x22>

08005996 <__malloc_lock>:
 8005996:	4770      	bx	lr

08005998 <__malloc_unlock>:
 8005998:	4770      	bx	lr

0800599a <_realloc_r>:
 800599a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599c:	4607      	mov	r7, r0
 800599e:	4614      	mov	r4, r2
 80059a0:	460e      	mov	r6, r1
 80059a2:	b921      	cbnz	r1, 80059ae <_realloc_r+0x14>
 80059a4:	4611      	mov	r1, r2
 80059a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059aa:	f7ff be0d 	b.w	80055c8 <_malloc_r>
 80059ae:	b922      	cbnz	r2, 80059ba <_realloc_r+0x20>
 80059b0:	f7ff fdbc 	bl	800552c <_free_r>
 80059b4:	4625      	mov	r5, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ba:	f000 f821 	bl	8005a00 <_malloc_usable_size_r>
 80059be:	42a0      	cmp	r0, r4
 80059c0:	d20f      	bcs.n	80059e2 <_realloc_r+0x48>
 80059c2:	4621      	mov	r1, r4
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff fdff 	bl	80055c8 <_malloc_r>
 80059ca:	4605      	mov	r5, r0
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0f2      	beq.n	80059b6 <_realloc_r+0x1c>
 80059d0:	4631      	mov	r1, r6
 80059d2:	4622      	mov	r2, r4
 80059d4:	f7ff fab6 	bl	8004f44 <memcpy>
 80059d8:	4631      	mov	r1, r6
 80059da:	4638      	mov	r0, r7
 80059dc:	f7ff fda6 	bl	800552c <_free_r>
 80059e0:	e7e9      	b.n	80059b6 <_realloc_r+0x1c>
 80059e2:	4635      	mov	r5, r6
 80059e4:	e7e7      	b.n	80059b6 <_realloc_r+0x1c>

080059e6 <__ascii_wctomb>:
 80059e6:	b149      	cbz	r1, 80059fc <__ascii_wctomb+0x16>
 80059e8:	2aff      	cmp	r2, #255	; 0xff
 80059ea:	bf85      	ittet	hi
 80059ec:	238a      	movhi	r3, #138	; 0x8a
 80059ee:	6003      	strhi	r3, [r0, #0]
 80059f0:	700a      	strbls	r2, [r1, #0]
 80059f2:	f04f 30ff 	movhi.w	r0, #4294967295
 80059f6:	bf98      	it	ls
 80059f8:	2001      	movls	r0, #1
 80059fa:	4770      	bx	lr
 80059fc:	4608      	mov	r0, r1
 80059fe:	4770      	bx	lr

08005a00 <_malloc_usable_size_r>:
 8005a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a04:	1f18      	subs	r0, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfbc      	itt	lt
 8005a0a:	580b      	ldrlt	r3, [r1, r0]
 8005a0c:	18c0      	addlt	r0, r0, r3
 8005a0e:	4770      	bx	lr

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
